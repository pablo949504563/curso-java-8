<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Red Hat Runtimes brings Vert.x and Dekorate to Spring Boot 2.2.6</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/W0rfYP8L60k/" /><category term="containers Java" scheme="searchisko:content:tags" /><category term="event-driven" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="Java EE" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="Spring Boot" scheme="searchisko:content:tags" /><category term="spring reactive" scheme="searchisko:content:tags" /><category term="vert.x" scheme="searchisko:content:tags" /><author><name>Syed M Shaaf</name></author><id>searchisko:content:id:jbossorg_blog-red_hat_runtimes_brings_vert_x_and_dekorate_to_spring_boot_2_2_6</id><updated>2020-06-17T07:00:48Z</updated><published>2020-06-17T07:00:48Z</published><content type="html">&lt;p&gt;The latest update to &lt;a href="https://developers.redhat.com/middleware/"&gt;Red Hat Runtimes&lt;/a&gt; features support for &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_support_for_spring_boot/2.2/html/release_notes_for_spring_boot_2.2/"&gt;Spring Boot 2.2.6&lt;/a&gt;, along with the &lt;a target="_blank" rel="nofollow" href="https://github.com/dekorateio/dekorate"&gt;Dekorate project&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://spring.io/reactive"&gt;Spring Reactive&lt;/a&gt;. Together, these technologies are a boost for developers building Spring-based applications on the &lt;a href="https://developers.redhat.com/openshift/"&gt;Red Hat OpenShift Container Platform&lt;/a&gt;. In this article, I present the highlights of this update.&lt;/p&gt; &lt;p&gt;&lt;span id="more-701247"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;About Red Hat Runtimes&lt;/strong&gt;: &lt;a href="https://developers.redhat.com/middleware/"&gt;Red Hat Runtimes&lt;/a&gt; provides a set of comprehensive frameworks, runtimes, and programming languages for developers, architects, and IT leaders with cloud-native application development needs. Developers use Red Hat Runtimes to access a variety of application runtimes on the &lt;a href="https://developers.redhat.com/openshift/"&gt;Red Hat OpenShift Container Platform&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Dekorate&lt;/h2&gt; &lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/dekorateio/dekorate"&gt;Dekorate&lt;/a&gt; is an extensive framework that allows developers to abstract the details of editing and avoid hours of tedious work writing XML, YAML, and JSON files. Instead, Dekorate simply &lt;a href="https://developers.redhat.com/blog/2019/08/15/how-to-use-dekorate-to-create-kubernetes-manifests/"&gt;generates these manifests at compile time&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Spring Reactive&lt;/h2&gt; &lt;p&gt;The latest release of Red Hat Runtimes brings the benefits of &lt;a href="https://developers.redhat.com/blog/2019/08/30/extending-support-for-spring-boot-2-1-6-and-spring-reactive/"&gt;Project Reactor and Spring WebFlux&lt;/a&gt; to OpenShift and standalone Red Hat Enterprise Linux (RHEL) deployments. In addition to the Spring Boot version update, this release includes a &lt;a href="https://developers.redhat.com/blog/2020/05/25/red-hat-build-of-eclipse-vert-x-3-9-brings-fluent-api-query/"&gt;set of Eclipse Vert.x extensions&lt;/a&gt; for the Spring Boot runtime. Among the Vert.x extensions is an asynchronous I/O API for reactively handling network communications between application services. These additions extend Spring WebFlux&amp;#8217;s reactive capabilities while retaining Spring Boot&amp;#8217;s abstraction and rapid prototyping capabilities.&lt;/p&gt; &lt;h2&gt;Red Hat support for Spring Boot&lt;/h2&gt; &lt;p&gt;The Red Hat Runtimes team is continuously updating and improving the documentation for building Spring Boot applications on OpenShift and RHEL. Please see the &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_support_for_spring_boot/2.2/html/release_notes_for_spring_boot_2.2/"&gt;Spring Boot 2.2.6 release notes&lt;/a&gt; and the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_support_for_spring_boot/2.2/html/spring_boot_runtime_guide/"&gt;Spring Boot Runtime Guide&lt;/a&gt; for more details about Red Hat&amp;#8217;s support for Spring Boot.&lt;/p&gt; &lt;h3&gt;Developer interactive learning scenarios&lt;/h3&gt; &lt;p&gt;Red Hat offers a variety of &lt;a target="_blank" rel="nofollow" href="https://learn.openshift.com/middleware/"&gt;self-paced scenarios&lt;/a&gt; to help you learn how to solve real-world problems with Red Hat Runtimes. Each scenario provides a preconfigured Red Hat OpenShift instance that you can access from your browser without any downloads or configuration. You can use the OpenShift instance to &lt;a target="_blank" rel="nofollow" href="https://learn.openshift.com/middleware/courses/middleware-spring-boot/"&gt;experiment with Spring Boot&lt;/a&gt; or to learn about other runtimes and technologies. Figure 1 shows a variety of available scenarios.&lt;/p&gt; &lt;div id="attachment_619977" class="wp-caption aligncenter"&gt; &lt;div id="attachment_619977" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://learn.openshift.com/middleware/courses/middleware-spring-boot/" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;img aria-describedby="caption-attachment-619977" class="wp-image-619977 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/08/Screen-Shot-2019-08-14-at-3.54.45-PM-1024x631.png" alt="A screenshot showing nine interactive learning modules on the Red Hat Interactive Courses homepage." width="640" height="394" aria-describedby="caption-attachment-619977" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/08/Screen-Shot-2019-08-14-at-3.54.45-PM-1024x631.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/Screen-Shot-2019-08-14-at-3.54.45-PM-300x185.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/Screen-Shot-2019-08-14-at-3.54.45-PM-768x474.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/Screen-Shot-2019-08-14-at-3.54.45-PM.png 1093w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-619977" class="wp-caption-text"&gt;Figure 1. Self-paced interactive scenarios from Red Hat.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Red Hat support for Spring Boot&lt;/h2&gt; &lt;p&gt;Support for &lt;a href="https://developers.redhat.com/topics/spring-boot/"&gt;Spring Boot&lt;/a&gt; is available to Red Hat customers through a subscription to &lt;a href="https://developers.redhat.com/products/rhoar/overview/"&gt;Red Hat Runtimes&lt;/a&gt;. Contact your local Red Hat representative or &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/about/contact/sales"&gt;Red Hat Sales&lt;/a&gt; to find out how you can enjoy world-class support from Red Hat and our global partner network.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: Moving forward, customers can expect updates to Spring Boot and other runtimes to follow the Red Hat &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/support/policy/updates/jboss_notes/"&gt;product update and support lifecycle&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;What&amp;#8217;s next for Spring Boot in Red Hat Runtimes&lt;/h3&gt; &lt;p&gt;The Red Hat Runtimes Spring Boot team is continually taking &lt;a target="_blank" rel="nofollow" href="https://issues.jboss.org/projects/SB"&gt;feedback&lt;/a&gt; from customers and the wider community of open source developers, as well as tracking the changes in &lt;a href="https://github.com/spring-projects/spring-boot/releases" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;upstream Spring Boot releases&lt;/a&gt;. The team will continue to update the Red Hat Runtimes support for Spring Boot based on those factors, as well as considering additional modules from Red Hat and the larger &lt;a href="https://developers.redhat.com/topics/enterprise-java/"&gt;Java&lt;/a&gt; and Spring communities.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;The latest Red Hat Runtimes update was developed by Red Hat&amp;#8217;s Application Runtimes Product and Engineering team along with the &lt;a target="_blank" rel="nofollow" href="https://snowdrop.me/"&gt;Snowdrop&lt;/a&gt; upstream community. These teams collaborated over many hours of development, testing, writing documentation, more testing, and incorporating contributions from the wider Red Hat community of customers, partners, and Spring developers. We hope that it meets or exceeds your expectations!&lt;/p&gt; &lt;/div&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F17%2Fred-hat-runtimes-brings-vert-x-and-dekorate-to-spring-boot-2-2-6%2F&amp;#38;linkname=Red%20Hat%20Runtimes%20brings%20Vert.x%20and%20Dekorate%20to%20Spring%20Boot%202.2.6" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F17%2Fred-hat-runtimes-brings-vert-x-and-dekorate-to-spring-boot-2-2-6%2F&amp;#38;linkname=Red%20Hat%20Runtimes%20brings%20Vert.x%20and%20Dekorate%20to%20Spring%20Boot%202.2.6" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F17%2Fred-hat-runtimes-brings-vert-x-and-dekorate-to-spring-boot-2-2-6%2F&amp;#38;linkname=Red%20Hat%20Runtimes%20brings%20Vert.x%20and%20Dekorate%20to%20Spring%20Boot%202.2.6" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F17%2Fred-hat-runtimes-brings-vert-x-and-dekorate-to-spring-boot-2-2-6%2F&amp;#38;linkname=Red%20Hat%20Runtimes%20brings%20Vert.x%20and%20Dekorate%20to%20Spring%20Boot%202.2.6" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F17%2Fred-hat-runtimes-brings-vert-x-and-dekorate-to-spring-boot-2-2-6%2F&amp;#38;linkname=Red%20Hat%20Runtimes%20brings%20Vert.x%20and%20Dekorate%20to%20Spring%20Boot%202.2.6" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F17%2Fred-hat-runtimes-brings-vert-x-and-dekorate-to-spring-boot-2-2-6%2F&amp;#38;linkname=Red%20Hat%20Runtimes%20brings%20Vert.x%20and%20Dekorate%20to%20Spring%20Boot%202.2.6" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F17%2Fred-hat-runtimes-brings-vert-x-and-dekorate-to-spring-boot-2-2-6%2F&amp;#38;linkname=Red%20Hat%20Runtimes%20brings%20Vert.x%20and%20Dekorate%20to%20Spring%20Boot%202.2.6" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F17%2Fred-hat-runtimes-brings-vert-x-and-dekorate-to-spring-boot-2-2-6%2F&amp;#038;title=Red%20Hat%20Runtimes%20brings%20Vert.x%20and%20Dekorate%20to%20Spring%20Boot%202.2.6" data-a2a-url="https://developers.redhat.com/blog/2020/06/17/red-hat-runtimes-brings-vert-x-and-dekorate-to-spring-boot-2-2-6/" data-a2a-title="Red Hat Runtimes brings Vert.x and Dekorate to Spring Boot 2.2.6"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/06/17/red-hat-runtimes-brings-vert-x-and-dekorate-to-spring-boot-2-2-6/"&gt;Red Hat Runtimes brings Vert.x and Dekorate to Spring Boot 2.2.6&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/W0rfYP8L60k" height="1" width="1" alt=""/&gt;</content><summary>The latest update to Red Hat Runtimes features support for Spring Boot 2.2.6, along with the Dekorate project and Spring Reactive. Together, these technologies are a boost for developers building Spring-based applications on the Red Hat OpenShift Container Platform. In this article, I present the highlights of this update. About Red Hat Runtimes: Red Hat Runtimes provides a set of comprehensive fr...</summary><dc:creator>Syed M Shaaf</dc:creator><dc:date>2020-06-17T07:00:48Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/06/17/red-hat-runtimes-brings-vert-x-and-dekorate-to-spring-boot-2-2-6/</feedburner:origLink></entry><entry><title>Red Hat JBoss Enterprise Application Platform expansion pack 1.0 released</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/EwW43vSoYow/" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="jakarta ee" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="microprofile" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="OpenAPI" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><author><name>James Falkner</name></author><id>searchisko:content:id:jbossorg_blog-red_hat_jboss_enterprise_application_platform_expansion_pack_1_0_released</id><updated>2020-06-17T07:00:44Z</updated><published>2020-06-17T07:00:44Z</published><content type="html">&lt;p&gt;Red Hat recently released the first &lt;a href="https://developers.redhat.com/products/eap/overview"&gt;Red Hat JBoss Enterprise Application Platform expansion pack (JBoss EAP XP)&lt;/a&gt; version 1.0. This version enables JBoss EAP developers to build &lt;a href="https://developers.redhat.com/topics/enterprise-java/"&gt;Java&lt;/a&gt; microservices using Eclipse MicroProfile 3.3 APIs while continuing to also support Jakarta EE 8. This article goes into detail on the nature of this new offering and an easy way to get started.&lt;/p&gt; &lt;h2&gt;Introduction to JBoss EAP expansion packs and Eclipse MicroProfile&lt;/h2&gt; &lt;p&gt;Organizations that have already embarked on—or are thinking about starting—a digital transformation journey are assessing and looking for ways to leverage their Java EE/Jakarta EE expertise. IT development and operations have built Java expertise over years, and there is a challenge to balance their existing skill base with new technologies, such as &lt;a href="https://developers.redhat.com/topics/microservices/"&gt;microservices&lt;/a&gt;, &lt;a href="https://developers.redhat.com/topics/api-management/"&gt;APIs&lt;/a&gt;, &lt;a href="https://developers.redhat.com/topics/containers/"&gt;container&lt;/a&gt;-based architectures, and reactive programming. &lt;a target="_blank" rel="nofollow" href="https://microprofile.io"&gt;Eclipse MicroProfile&lt;/a&gt; is an open source project and one of those technologies that enables and optimizes the development of microservices while using familiar Java EE technologies and APIs.&lt;/p&gt; &lt;p&gt;You can think of MicroProfile as a minimal standard profile for Java microservices. As with Jakarta EE, MicroProfile implementations across different vendors are fully interoperable. You can read more about MicroProfile in the free e-book &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/resources/enterprise-java-microservices-ebook"&gt;Enterprise Java microservices with Eclipse MicroProfile&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;By using this expansion pack with &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/technologies/jboss-middleware/application-platform"&gt;Red Hat JBoss Enterprise Application Platform&lt;/a&gt;, which is part of &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/products/runtimes"&gt;Red Hat Runtimes&lt;/a&gt;, developers can use JBoss EAP as a MicroProfile-compliant platform. This release simplifies the inherent complexity of developing cloud-native applications on JBoss EAP with MicroProfile. The expansion pack is a separate downloadable distribution that can be applied on top of existing JBoss EAP servers, or you can use the container images available for use with &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/technologies/cloud-computing/openshift"&gt;Red Hat OpenShift&lt;/a&gt; when deploying JBoss EAP on OpenShift.&lt;/p&gt; &lt;h2&gt;Test driving a sample app&lt;/h2&gt; &lt;p&gt;As outlined in the documentation, the expansion pack is distributed as a &lt;em&gt;patch&lt;/em&gt;, which is applied using the JBoss EAP XP &lt;em&gt;Patch Manager&lt;/em&gt;. To quickly see how this works, let&amp;#8217;s take a test drive. You&amp;#8217;ll need a few developer tools like &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/products/openjdk/"&gt;OpenJDK 11&lt;/a&gt;, &lt;a target="_blank" rel="nofollow" href="https://git-scm.com/downloads"&gt;Git&lt;/a&gt;, &lt;a target="_blank" rel="nofollow" href="https://maven.apache.org/download.cgi"&gt;Maven&lt;/a&gt;, a text editor, and utilities like &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://curl.haxx.se/"&gt;curl&lt;/a&gt;&lt;/code&gt;, along with having your Red Hat Developer credentials ready for the first step:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;&lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html?product=appplatform&amp;#38;downloadType=distributions"&gt;Download JBoss EAP 7.3.0&lt;/a&gt;&lt;/strong&gt;: (You will need your Red Hat Developer credentials for this step.) Save it to your local desktop and unzip it into any folder you like, under which you&amp;#8217;ll find a new folder called &lt;code&gt;jboss-eap-7.3.0&lt;/code&gt;. I&amp;#8217;ll extract the zip file to the &lt;code&gt;/tmp&lt;/code&gt; folder for brevity: &lt;pre&gt;$ unzip -d /tmp ~/Downloads/jboss-eap-7.3.0.zip&lt;/pre&gt; &lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html?product=appplatform&amp;#38;downloadType=patches&amp;#38;version=7.3"&gt;&lt;strong&gt;Download the JBoss EAP 7.3 Update 01 Patch&lt;/strong&gt;&lt;/a&gt;: We&amp;#8217;ll use this file to patch our 7.3.0 to 7.3.1 (the required version for EAP XP). I&amp;#8217;ll save it to &lt;code&gt;/tmp/jboss-eap-7.3.1-patch.zip&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html?product=appplatform.xp&amp;#38;downloadType=distributions"&gt;&lt;strong&gt;Download JBoss EAP XP 1.0.0 Manager&lt;/strong&gt;&lt;/a&gt;: It&amp;#8217;s a JAR file. I&amp;#8217;ll also save this to &lt;code&gt;/tmp/jboss-eap-xp-1.0.0.GA-manager.jar&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;&lt;a href="#"&gt;Download Cumulative Patch Release for the JBoss EAP XP 1.0.0 Runtime Distribution&lt;/a&gt;&lt;/strong&gt;: I&amp;#8217;ll also save this to &lt;code&gt;/tmp/jboss-eap-xp-1.0.0-patch.zip&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;With our downloads complete, let&amp;#8217;s apply the patches:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Apply the patch to take EAP from 7.3.0 to 7.3.1 using the following command: &lt;pre&gt;$ /tmp/jboss-eap-7.3/bin/jboss-cli.sh "patch apply /tmp/jboss-eap-7.3.1-patch.zip"&lt;/pre&gt; &lt;/li&gt; &lt;li&gt;Set up the JBoss EAP Patch Manager: &lt;pre&gt;$ java -jar /tmp/jboss-eap-xp-1.0.0-manager.jar setup --jboss-home=/tmp/jboss-eap-7.3&lt;/pre&gt; &lt;/li&gt; &lt;li&gt;Apply the patch for JBoss EAP XP 1.0: &lt;pre&gt;$ /tmp/jboss-eap-7.3/bin/jboss-cli.sh "patch apply /tmp/jboss-eap-xp-1.0.0-patch.zip"&lt;/pre&gt; &lt;/li&gt; &lt;li&gt;Start JBoss EAP using the MicroProfile configuration that was installed as part of the patch, and enable metrics on the server: &lt;pre&gt;$ /tmp/jboss-eap-7.3/bin/standalone.sh -Dwildfly.statistics-enabled=true -c=standalone-microprofile.xml&lt;/pre&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;With our new JBoss EAP plus MicroProfile server started, let&amp;#8217;s deploy a sample app. Open a separate terminal and:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Use Git to clone the Quickstarts repository to your local machine (I&amp;#8217;ll put it in &lt;code&gt;/tmp&lt;/code&gt; as well): &lt;pre&gt;$ git clone https://github.com/jboss-developer/jboss-eap-quickstarts /tmp/jboss-eap-quickstarts&lt;/pre&gt; &lt;/li&gt; &lt;li&gt;Build and deploy the sample &lt;code&gt;helloworld-rs&lt;/code&gt; (a simple RESTful app using JAX-RS) to the running JBoss EAP: &lt;pre&gt;$ mvn clean install wildfly:deploy -f /tmp/jboss-eap-quickstarts/helloworld-rs&lt;/pre&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Now that our sample app is deployed, let&amp;#8217;s try to access the MicroProfile Metrics API to gather metrics about our app and the server:&lt;/p&gt; &lt;pre&gt;$ curl -s http://localhost:9990/metrics # HELP jboss_undertow_request_count_total The number of requests this listener has served # TYPE jboss_undertow_request_count_total counter jboss_undertow_request_count_total{https_listener="https",server="default-server",microprofile_scope="vendor"} 0.0 jboss_undertow_request_count_total{http_listener="default",server="default-server",microprofile_scope="vendor"} 3.0 jboss_undertow_request_count_total{deployment="helloworld-rs.war",servlet="org.jboss.as.quickstarts.rshelloworld.JAXActivator",subdeployment="helloworld-rs.war",microprofile_scope="vendor"} 0.0 &lt;/pre&gt; &lt;p&gt;You&amp;#8217;ll see lots of metrics in the &lt;a target="_blank" rel="nofollow" href="https://openmetrics.io/"&gt;OpenMetrics format&lt;/a&gt; that JBoss EAP exposes. This output could later be hooked up to &lt;a target="_blank" rel="nofollow" href="https://prometheus.io/"&gt;Prometheus&lt;/a&gt; if you wanted to set up alerts on different metrics. We can filter based on scope and metric name to only show a subset for our app:&lt;/p&gt; &lt;pre&gt;$ curl -s http://localhost:9990/metrics/vendor/jboss_undertow_request_count | grep helloworld-rs.war jboss_undertow_request_count_total{deployment="helloworld-rs.war",servlet="org.jboss.as.quickstarts.rshelloworld.JAXActivator",subdeployment="helloworld-rs.war",microprofile_scope="vendor"} 0.0 &lt;/pre&gt; &lt;p&gt;This output shows us the metrics from the Undertow subsystem for our &lt;code&gt;helloworld-rs&lt;/code&gt; app, showing that there have been zero requests.&lt;/p&gt; &lt;p&gt;Now access the actual app itself one time:&lt;/p&gt; &lt;pre&gt;$ curl http://localhost:8080/helloworld-rs/rest/json {"result":"Hello World!"} &lt;/pre&gt; &lt;p&gt;Let&amp;#8217;s access the MicroProfile Metrics again, expecting that the request count should be &lt;code&gt;1.0&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;$ curl -s http://localhost:9990/metrics/vendor/jboss_undertow_request_count | grep helloworld-rs.war jboss_undertow_request_count_total{deployment="helloworld-rs.war",servlet="org.jboss.as.quickstarts.rshelloworld.JAXActivator",subdeployment="helloworld-rs.war",microprofile_scope="vendor"} 1.0 &lt;/pre&gt; &lt;p&gt;Indeed it is (look at the end of the line for &lt;code&gt;1.0&lt;/code&gt;. Previously it was &lt;code&gt;0.0&lt;/code&gt;). Note that in order for metrics to be generated, you must remember to enable statistics on the server using &lt;code&gt;-Dwildfly.statistics-enabled=true&lt;/code&gt;.&lt;/p&gt; &lt;h3&gt;Using MicroProfile APIs&lt;/h3&gt; &lt;p&gt;In the previous example, we didn&amp;#8217;t actually type or use any MicroProfile APIs in the &lt;code&gt;helloworld-rs&lt;/code&gt; application. Instead, the core MicroProfile capabilities of JBoss EAP XP were reporting on standard metrics. Let&amp;#8217;s actually use one of the MicroProfile APIs for OpenAPI in our app.&lt;/p&gt; &lt;p&gt;JBoss EAP XP can generate OpenAPI documentation for applications, even without using OpenAPI. Run this &lt;code&gt;curl&lt;/code&gt; command to see what it generates for our app:&lt;/p&gt; &lt;pre&gt;$ curl http://localhost:8080/openapi --- openapi: 3.0.1 info: title: helloworld-rs.war version: "1.0" servers: - url: /helloworld-rs paths: /rest/json: get: responses: "200": description: OK content: application/json: schema: type: string /rest/xml: get: responses: "200": description: OK content: application/xml: schema: type: string &lt;/pre&gt; &lt;p&gt;This outputs the &lt;a target="_blank" rel="nofollow" href="https://swagger.io/specification/"&gt;OpenAPI-formatted&lt;/a&gt; documentation for our example REST APIs. While this is useful, let&amp;#8217;s improve it with MicroProfile OpenAPI!&lt;/p&gt; &lt;p&gt;Before we do that, we&amp;#8217;ll need to add the dependencies to our &lt;code&gt;pom.xml&lt;/code&gt;. First, add a &lt;code&gt;&amp;#60;dependencyManagement&amp;#62;&lt;/code&gt; element to pull in the MicroProfile Bill of Materials (BOM). Add this to the &lt;code&gt;pom.xml&lt;/code&gt; in the quickstart&amp;#8217;s base directory—in my case in &lt;code&gt;/tmp/jboss-eap-quickstarts/helloworld-rs/pom.xml&lt;/code&gt;—right before the existing &lt;code&gt;&amp;#60;dependency&amp;#62;&lt;/code&gt; block:&lt;/p&gt; &lt;pre&gt; &amp;#60;dependencyManagement&amp;#62; &amp;#60;dependencies&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;org.jboss.bom&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;jboss-eap-xp-microprofile&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;1.0.0.GA&amp;#60;/version&amp;#62; &amp;#60;type&amp;#62;pom&amp;#60;/type&amp;#62; &amp;#60;scope&amp;#62;import&amp;#60;/scope&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;/dependencies&amp;#62; &amp;#60;/dependencyManagement&amp;#62; &lt;/pre&gt; &lt;p&gt;Next, &lt;em&gt;inside&lt;/em&gt; of the &lt;code&gt;&amp;#60;dependency&amp;#62;&lt;/code&gt; block, add a new dependency for the MicroProfile OpenAPI:&lt;/p&gt; &lt;pre&gt;&amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;org.eclipse.microprofile.openapi&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;microprofile-openapi-api&amp;#60;/artifactId&amp;#62; &amp;#60;scope&amp;#62;provided&amp;#60;/scope&amp;#62; &amp;#60;/dependency&amp;#62; &lt;/pre&gt; &lt;p&gt;With our dependencies specified, we can now use the MicroProfile APIs. In the &lt;code&gt;src/main/java/org/jboss/as/quickstarts/rshelloworld/HelloWorld.java&lt;/code&gt; file, look for the &lt;code&gt;getHelloWorldJSON()&lt;/code&gt; method, and add the following line above the &lt;code&gt;@GET&lt;/code&gt; annotation:&lt;/p&gt; &lt;pre&gt;@Operation(description = "Get Helloworld as a JSON object") &lt;/pre&gt; &lt;p&gt;This adds a simple OpenAPI annotation that will add the description in the &lt;code&gt;/openapi&lt;/code&gt; output. You will also need to add a new import statement at the top of the file:&lt;/p&gt; &lt;pre&gt;import org.eclipse.microprofile.openapi.annotations.Operation; &lt;/pre&gt; &lt;p&gt;Save the file, and re-deploy the app with this command:&lt;/p&gt; &lt;pre&gt;$ mvn clean install wildfly:deploy -f /tmp/jboss-eap-quickstarts/helloworld-rs &lt;/pre&gt; &lt;p&gt;With the new OpenAPI-annotated app in place, access the OpenAPI endpoint once again:&lt;/p&gt; &lt;pre&gt;$ curl http://localhost:8080/openapi --- openapi: 3.0.1 info: title: helloworld-rs.war version: "1.0" servers: - url: /helloworld-rs paths: /rest/json: get: description: Get Helloworld as a JSON object responses: "200": description: OK content: application/json: schema: type: string /rest/xml: get: responses: "200": description: OK content: application/xml: schema: type: string &lt;/pre&gt; &lt;p&gt;You can see the new &lt;code&gt;description&lt;/code&gt; added in the docs for the &lt;code&gt;/rest/json&lt;/code&gt; endpoint. You can further enhance/complete your OpenAPI documentation by adding additional MicroProfile OpenAPI annotations. You will need to rebuild/redeploy for those changes to be reflected in the OpenAPI document.&lt;/p&gt; &lt;p&gt;There are many other MicroProfile APIs you can use to enhance your applications, ranging from fault tolerance, security with JWT, REST clients, and more. The &lt;a target="_blank" rel="nofollow" href="https://github.com/jboss-developer/jboss-eap-quickstarts/tree/xp-1.0.x"&gt;JBoss EAP XP Quickstarts&lt;/a&gt; illustrate how each is used to create Java microservices on JBoss EAP. Users of &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/technologies/jboss-middleware/codeready-studio"&gt;CodeReady Studio&lt;/a&gt; can also use MicroProfile APIs, as outlined in &lt;a href="https://developers.redhat.com/blog/2020/06/16/enable-eclipse-microprofile-applications-on-red-hat-jboss-enterprise-application-platform-7-3/"&gt;this article&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;Using JBoss EAP XP on OpenShift&lt;/h3&gt; &lt;p&gt;JBoss EAP XP is also available through OpenShift S2I images, just like JBoss EAP itself. Let&amp;#8217;s deploy an example. First, you&amp;#8217;ll need an OpenShift 4.x cluster that has access to registry.redhat.io, and the &lt;code&gt;oc&lt;/code&gt; command line, and be logged into your cluster. Then:&lt;/p&gt; &lt;ol&gt; &lt;li style="list-style-type: none;"&gt; &lt;ol&gt; &lt;li&gt;Create a new project to house our app: &lt;pre&gt;$ oc new-project eap-demo&lt;/pre&gt; &lt;/li&gt; &lt;li&gt;Import the ImageStream definitions for XP on OpenJDK 11 (this requires cluster-admin privileges): &lt;pre&gt;$ oc replace --force -n openshift -f https://raw.githubusercontent.com/jboss-container-images/jboss-eap-openshift-templates/eap-xp1/jboss-eap-xp1-openjdk11-openshift.json&lt;/pre&gt; &lt;/li&gt; &lt;li&gt;Import the Templates that define how apps are deployed (this requires cluster-admin privileges): &lt;pre&gt;$ oc replace --force -n openshift -f https://raw.githubusercontent.com/jboss-container-images/jboss-eap-openshift-templates/eap-xp1/templates/eap-xp1-basic-s2i.json&lt;/pre&gt; &lt;/li&gt; &lt;li&gt;Create the app from the template: &lt;pre&gt;$ oc new-app --template=eap-xp1-basic-s2i -p APPLICATION_NAME=eap-demo \ -p EAP_IMAGE_NAME=jboss-eap-xp1-openjdk11-openshift:1.0 \ -p EAP_RUNTIME_IMAGE_NAME=jboss-eap-xp1-openjdk11-runtime-openshift:1.0 \ -p IMAGE_STREAM_NAMESPACE=openshift \ -p SOURCE_REPOSITORY_URL=https://github.com/jboss-developer/jboss-eap-quickstarts \ -p SOURCE_REPOSITORY_REF=7.3.x \ -p CONTEXT_DIR="helloworld-rs"&lt;/pre&gt; &lt;/li&gt; &lt;li&gt;Two builds will run, one after the other, to build the app. &lt;pre&gt;$ oc logs -f bc/eap-demo-build-artifacts &amp;#38;&amp;#38; oc logs -f bc/eap-demo&lt;/pre&gt; &lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;/ol&gt; &lt;ol&gt; &lt;li style="list-style-type: none;"&gt; &lt;ol start="6"&gt; &lt;li&gt;After both builds complete, watch the rollout with: &lt;pre&gt;$ oc rollout status -w dc/eap-demo&lt;/pre&gt; &lt;p&gt;The build and rollout will take some time to finish.&lt;/li&gt; &lt;li&gt;Once the app is done building and deploying, access the same OpenAPI endpoint as before: &lt;pre&gt;$ curl -k https://$(oc get route eap-demo -o jsonpath="{.spec.host}")/openapi&lt;/pre&gt; &lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;You can also see the deployed app on the &lt;strong&gt;OpenShift Topology&lt;/strong&gt; view in the OpenShift Console:&lt;/p&gt; &lt;div id="attachment_734567" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-734567" class=" size-large wp-image-734567 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-16-at-10.25.14-AM-1024x573.png" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-16-at-10.25.14-AM-1024x573.png" alt="OpenShift Topology View with JBoss EAP Application" width="640" height="358" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-16-at-10.25.14-AM-1024x573.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-16-at-10.25.14-AM-300x168.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-16-at-10.25.14-AM-768x430.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-16-at-10.25.14-AM.png 1310w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-734567" class="wp-caption-text"&gt;OpenShift Topology View with JBoss EAP Application&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Documentation&lt;/h2&gt; &lt;p&gt;The new &lt;a href="#"&gt;Using Eclipse MicroProfile in JBoss EAP&lt;/a&gt; guide can be found within the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/"&gt;JBoss EAP documentation&lt;/a&gt;. The guide covers important details about MicroProfile and how developers can quickly get started using MicroProfile APIs in their JBoss projects. You can also find important information about the release itself in the &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html/red_hat_jboss_enterprise_application_platform_expansion_pack_1.0_release_notes/"&gt;Red Hat JBoss Enterprise Application Platform Expansion Pack 1.0 Release Notes&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Getting support for JBoss EAP XP&lt;/h2&gt; &lt;p&gt;Support for expansion packs is available to Red Hat customers through a subscription to Red Hat Runtimes. Contact your local Red Hat representative or Red Hat Sales for details on how you can enjoy world-class support offered from Red Hat and its worldwide partner network.&lt;/p&gt; &lt;p&gt;JBoss Enterprise Application Platform expansion pack (JBoss EAP XP or EAP XP) is subject to its own separate support policy and life cycle for closer alignment with Eclipse MicroProfile specification release cadence. JBoss EAP server instances with the EAP XP setup will be covered in their entirety by the new EAP XP policy and life cycle.&lt;/p&gt; &lt;p&gt;By setting up EAP XP, your server will be subject to the EAP XP support and life cycle policy. Please refer to the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/support/policy/updates/jboss_eap_xp_notes"&gt;JBoss Enterprise Application Platform expansion pack Life Cycle page&lt;/a&gt; for more details.&lt;/p&gt; &lt;h2&gt;JBoss EAP XP resources&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html/red_hat_jboss_enterprise_application_platform_expansion_pack_1.0_release_notes/"&gt;Red Hat JBoss Enterprise Application Platform Expansion Pack 1.0 Release Notes&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Using Eclipse MicroProfile in JBoss EAP&lt;/a&gt;&lt;/li&gt; &lt;li class="listitem"&gt;&lt;a class="link" target="_blank" rel="nofollow" href="https://access.redhat.com/support/policy/updates/jboss_eap_xp_notes"&gt;JBoss Enterprise Application Platform expansion pack Support and Life Cycle Policies&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://microprofile.io"&gt;MicroProfile Home&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://middlewareblog.redhat.com/category/microprofile/"&gt;MicroProfile on the Red Hat Blog&lt;/a&gt;&lt;/li&gt; &lt;li class="listitem"&gt;&lt;a class="link" target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_in_jboss_eap/index#installing-jboss-eap-xp-1-on-jboss-eap-730_default"&gt;Installing JBoss EAP XP 1.0 on JBoss EAP 7.3.0&lt;/a&gt;&lt;/li&gt; &lt;li class="listitem"&gt;&lt;a class="link" target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_in_jboss_eap/index#installing-jboss-eap-xp-1-on-jboss-eap-731_default"&gt;Installing JBoss EAP XP 1.0 on JBoss EAP 7.3.1&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F17%2Fred-hat-jboss-enterprise-application-platform-expansion-pack-1-0-released%2F&amp;#38;linkname=Red%20Hat%20JBoss%20Enterprise%20Application%20Platform%20expansion%20pack%201.0%20released" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F17%2Fred-hat-jboss-enterprise-application-platform-expansion-pack-1-0-released%2F&amp;#38;linkname=Red%20Hat%20JBoss%20Enterprise%20Application%20Platform%20expansion%20pack%201.0%20released" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F17%2Fred-hat-jboss-enterprise-application-platform-expansion-pack-1-0-released%2F&amp;#38;linkname=Red%20Hat%20JBoss%20Enterprise%20Application%20Platform%20expansion%20pack%201.0%20released" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F17%2Fred-hat-jboss-enterprise-application-platform-expansion-pack-1-0-released%2F&amp;#38;linkname=Red%20Hat%20JBoss%20Enterprise%20Application%20Platform%20expansion%20pack%201.0%20released" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F17%2Fred-hat-jboss-enterprise-application-platform-expansion-pack-1-0-released%2F&amp;#38;linkname=Red%20Hat%20JBoss%20Enterprise%20Application%20Platform%20expansion%20pack%201.0%20released" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F17%2Fred-hat-jboss-enterprise-application-platform-expansion-pack-1-0-released%2F&amp;#38;linkname=Red%20Hat%20JBoss%20Enterprise%20Application%20Platform%20expansion%20pack%201.0%20released" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F17%2Fred-hat-jboss-enterprise-application-platform-expansion-pack-1-0-released%2F&amp;#38;linkname=Red%20Hat%20JBoss%20Enterprise%20Application%20Platform%20expansion%20pack%201.0%20released" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F17%2Fred-hat-jboss-enterprise-application-platform-expansion-pack-1-0-released%2F&amp;#038;title=Red%20Hat%20JBoss%20Enterprise%20Application%20Platform%20expansion%20pack%201.0%20released" data-a2a-url="https://developers.redhat.com/blog/2020/06/17/red-hat-jboss-enterprise-application-platform-expansion-pack-1-0-released/" data-a2a-title="Red Hat JBoss Enterprise Application Platform expansion pack 1.0 released"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/06/17/red-hat-jboss-enterprise-application-platform-expansion-pack-1-0-released/"&gt;Red Hat JBoss Enterprise Application Platform expansion pack 1.0 released&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/EwW43vSoYow" height="1" width="1" alt=""/&gt;</content><summary>Red Hat recently released the first Red Hat JBoss Enterprise Application Platform expansion pack (JBoss EAP XP) version 1.0. This version enables JBoss EAP developers to build Java microservices using Eclipse MicroProfile 3.3 APIs while continuing to also support Jakarta EE 8. This article goes into detail on the nature of this new offering and an easy way to get started. Introduction to JBoss EAP...</summary><dc:creator>James Falkner</dc:creator><dc:date>2020-06-17T07:00:44Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/06/17/red-hat-jboss-enterprise-application-platform-expansion-pack-1-0-released/</feedburner:origLink></entry><entry><title>Support for GraphQL with Open Liberty 20.0.0.6</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/UGqWfpmEp9M/" /><category term="apache maven" scheme="searchisko:content:tags" /><category term="devops" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="grafana dashboard" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="java runtime" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="prometheus data" scheme="searchisko:content:tags" /><author><name>Yasmin.Aumeeruddy</name></author><id>searchisko:content:id:jbossorg_blog-support_for_graphql_with_open_liberty_20_0_0_6</id><updated>2020-06-17T07:00:16Z</updated><published>2020-06-17T07:00:16Z</published><content type="html">&lt;p&gt;The &lt;a href="https://github.com/OpenLiberty/open-liberty/releases"&gt;Open Liberty 20.0.0.6&lt;/a&gt; release brings new features, updates, and bug fixes. This article introduces the new features in Open Liberty 20.0.0.6, including support for developing &amp;#8220;code-first&amp;#8221; GraphQL applications, provisioning features from a Maven repository, and using a server configuration to control application startup.&lt;/p&gt; &lt;h2&gt;What&amp;#8217;s new in Open Liberty 20.0.0.6&lt;/h2&gt; &lt;p&gt;Open Liberty 20.0.0.6 includes the following feature updates, which I discuss in the next sections:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="#GQL"&gt;Using GraphQL with Open Liberty&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#MVN"&gt;Provisioning features from a Maven repository&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#ORDER"&gt;Administrators control the application start order&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#GRA"&gt;New REST visualizations in Open Liberty Grafana dashboards&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#STA"&gt;Web application startup changes&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: Visit &lt;a href="https://github.com/OpenLiberty/open-liberty/issues?q=label%3Arelease%3A20006+label%3A%22release+bug%22+"&gt;Open Liberty&amp;#8217;s GitHub repository&lt;/a&gt; to learn about bug fixes in Open Liberty 20.0.0.6.&lt;/p&gt; &lt;p&gt;&lt;span id="more-729187"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Run your apps using Open Liberty 20.0.0.6&lt;/h2&gt; &lt;p&gt;Use the following command to get or update to Open Liberty 20.0.0.6 using &lt;a target="_blank" rel="nofollow" href="https://openliberty.io/guides/maven-intro.html"&gt;Maven&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;  &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;io.openliberty&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;openliberty-runtime&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;20.0.0.6&amp;#60;/version&amp;#62; &amp;#60;type&amp;#62;zip&amp;#60;/type&amp;#62; &amp;#60;/dependency&amp;#62; &lt;/pre&gt; &lt;p&gt;If you&amp;#8217;re using &lt;a target="_blank" rel="nofollow" href="https://openliberty.io/guides/gradle-intro.html"&gt;Gradle&lt;/a&gt;, simply enter:&lt;/p&gt; &lt;pre&gt;dependencies { libertyRuntime group: 'io.openliberty', name: 'openliberty-runtime', version: '[20.0.0.6,)' } &lt;/pre&gt; &lt;p&gt;Here&amp;#8217;s the command for Docker:&lt;/p&gt; &lt;pre&gt;FROM open-liberty &lt;/pre&gt; &lt;p&gt;See the &lt;a target="_blank" rel="nofollow" href="https://openliberty.io/downloads/"&gt;Open Liberty downloads page&lt;/a&gt; to get the latest release for Jakarta EE 8, Web Profile 8, and MicroProfile 3.&lt;/p&gt; &lt;h2 id="GQL"&gt;Using GraphQL with Open Liberty&lt;/h2&gt; &lt;p&gt;Open Liberty&amp;#8217;s support for &lt;a target="_blank" rel="nofollow" href="https://github.com/eclipse/microprofile-graphql"&gt;MicroProfile GraphQL&lt;/a&gt; lets developers write &amp;#8220;code-first&amp;#8221; GraphQL applications that put clients in control of the data they receive. You can use annotations like &lt;code&gt;@Query&lt;/code&gt; and &lt;code&gt;@Mutation&lt;/code&gt; to turn Plain Old Java Objects (POJOs) into HTTP-based GraphQL endpoints. When the query or mutation method returns an existing entity object, the client can specify the fields it is interested in—which reduces network bandwidth and client-side processing.&lt;/p&gt; &lt;p&gt;Here’s an example:&lt;/p&gt; &lt;pre&gt;@GraphQLApi public class MovieService { AtomicInteger nextId = new AtomicInteger(); Map&amp;#60;Integer, Movie&amp;#62; movieDB = new HashMap(); @Query("movieById") public Movie getMovieByID(int id) throws UnknownMovieException { return Optional.ofNullable(movieDB.get(id)).orElseThrow(UnknownMovieException::new); } @Query("allMoviesDirectedBy") public List&amp;#60;Movie&amp;#62; getAllMoviesWithDirector(String directorName) { return movieDB.values().stream() .filter(m -&amp;#62; m.getDirector().equals(directorName)) .collect(Collectors.toList()); } @Mutation("newMovie") public int createNewMovie(@Name("movie") Movie movie) { int id = nextId.incrementAndGet(); movie.setId(id); movieDB.put(id, movie); return id; } } &lt;/pre&gt; &lt;p&gt;This code creates a GraphQL application with two queries (&lt;code&gt;movieById&lt;/code&gt; and &lt;code&gt;allMoviesDirectedBy&lt;/code&gt;) and a mutation (&lt;code&gt;newMovie&lt;/code&gt;). If the client executes the following query:&lt;/p&gt; &lt;pre&gt;query { allMoviesDirectedBy(directorName: "Roland Emmerich") { id, title, actors } } &lt;/pre&gt; &lt;p&gt;The result will be:&lt;/p&gt; &lt;pre&gt;{ "data": { "allMoviesDirectedBy": [ { "id": 1, "title": "Independence Day", "actors": [ "Will Smith", "Bill Pullman", "Jeff Goldblum", ... ] }, ... ] } } &lt;/pre&gt; &lt;p&gt;Open Liberty’s GraphQL APIs were developed within the MicroProfile community and have broad industry support. The implementation is based on SmallRye GraphQL. Liberty’s GraphQL feature goes beyond the MicroProfile specification and adds support for collecting metrics, checking authorizations, and logging requests and responses to query and mutation methods.&lt;/p&gt; &lt;p&gt;For more details and a sample application, see this &lt;a target="_blank" rel="nofollow" href="https://github.com/OpenLiberty/sample-mp-graphql"&gt;simple demo of the MicroProfile GraphQL capabilities in Open Liberty&lt;/a&gt;. Join the growing &lt;a target="_blank" rel="nofollow" href="https://landscape.graphql.org/"&gt;landscape of GraphQL adopters&lt;/a&gt; and write your first GraphQL application today!&lt;/p&gt; &lt;h2 id="MVN"&gt;Provisioning features from a Maven repository&lt;/h2&gt; &lt;p&gt;Developers can now use a convenient command-line tool to install features from the Maven Central repository or an on-premises Maven repository (such as one served on Artifactory or Nexus) directly onto an Open Liberty runtime. Table 1 details using the &lt;code&gt;wlp/bin/featureUtility&lt;/code&gt; commands to find, install, and get information about assets in a Maven repository.&lt;/p&gt; &lt;h4&gt;Table 1. Open Liberty commands to install features from a Maven repository&lt;/h4&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;&lt;b&gt;Command&lt;/b&gt;&lt;/td&gt; &lt;td&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;code&gt;featureUtility help installFeature&lt;/code&gt;&lt;/td&gt; &lt;td&gt;Display help information for the &lt;code&gt;installFeature&lt;/code&gt; action.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;code&gt;featureUtility installFeature mpHealth-2.2&lt;/code&gt; or &lt;code&gt;featureUtility installFeature io.openliberty.features:mpHealth-2.2&lt;/code&gt;&lt;/td&gt; &lt;td&gt;Install the MicroProfile Health 2.2 feature from Maven Central.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;code&gt;featureUtility installServerFeatures myserver&lt;/code&gt;&lt;/td&gt; &lt;td&gt;Install server features for the &lt;code&gt;myserver&lt;/code&gt; server.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;code&gt;featureUtility installFeature mpHealth-2.2 --noCache&lt;/code&gt;&lt;/td&gt; &lt;td&gt;Install the MicroProfile Health 2.2 feature without caching the feature to the local Maven repository.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;code&gt;featureUtility installServerFeatures myserver --noCache&lt;/code&gt;&lt;/td&gt; &lt;td&gt;Install server features for the &lt;code&gt;myserver&lt;/code&gt; server without caching the features to the local Maven repository.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;code&gt;featureUtility installFeature adminCenter-1.0 --acceptLicense&lt;/code&gt;&lt;/td&gt; &lt;td&gt;Install the Admin Center feature from Maven Central.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;code&gt;featureUtility installServerFeatures defaultServer --verbose&lt;/code&gt;&lt;/td&gt; &lt;td&gt;Install features for the &lt;code&gt;myserver&lt;/code&gt; server with debugging enabled.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;code&gt;featureUtility viewSettings&lt;/code&gt;&lt;/td&gt; &lt;td&gt;View a template of your &lt;code&gt;featureUtility.properties&lt;/code&gt; file.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;code&gt;featureUtility find mpHealth-2.2&lt;/code&gt;&lt;/td&gt; &lt;td&gt;Search for the MicroProfile Health 2.2 feature from Maven Central and all configured Maven repositories.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;code&gt;featureUtility find&lt;/code&gt;&lt;/td&gt; &lt;td&gt;Search for all available features from Maven Central and all configured Maven repositories.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;h2 id="ORDER"&gt;Administrators control the application start order&lt;/h2&gt; &lt;p&gt;By default, applications start in parallel and can finish starting in random order. With the 20.0.0.6 release, Open Liberty empowers administrators to prevent an application from starting until one or more other applications have started.&lt;/p&gt; &lt;p&gt;Being able to define the order of application startup is critical because applications are often dependent on each other. For example, a single Open Liberty server might contain a front-end application that provides a user interface and a back-end application that accesses a database. Having the front-end application available before the back end started could result in errors. With this feature, you could prevent the front-end application from starting until the back end was ready.&lt;/p&gt; &lt;p&gt;You only need to define the application dependencies in the configuration, using the &lt;code&gt;startAfter&lt;/code&gt; attribute on the &lt;code&gt;application&lt;/code&gt; element. In this example, you would add a comma-separated list of ID values for the back-end applications that must start before the front-end application can run:&lt;/p&gt; &lt;pre&gt; &amp;#60;webApplication id="frontend" location="myFrontend.war" startAfter="backend1, backend2"/&amp;#62; &amp;#60;enterpriseApplication id="backend1" location="myBackend.ear"/&amp;#62; &amp;#60;enterpriseApplication id="backend2" location="myUtilities.ear"/&amp;#62; &lt;/pre&gt; &lt;h2 id="GRA"&gt;REST visualizations in Open Liberty Grafana dashboards&lt;/h2&gt; &lt;p&gt;Grafana dashboards provide a wide range of time-series visualizations of MicroProfile Metrics data such as CPU, REST, servlet, connection pool, and garbage collection metrics. Grafana dashboards are powered by a Prometheus data source, which is configured to ingest data from the &lt;code&gt;/metrics&lt;/code&gt; endpoint of one or more Open Liberty servers. As a result, users can view the metrics on Grafana dashboards in near real-time.&lt;/p&gt; &lt;p&gt;With the release of &lt;code&gt;mpMetrics-2.3&lt;/code&gt; and its addition of JAX-RS metrics, we&amp;#8217;ve introduced a new set of visualizations to our Open Liberty Grafana dashboards. You can find these under a new tab labeled &lt;b&gt;REST&lt;/b&gt;. We&amp;#8217;ve also added hover-over descriptions that provide a brief summary of each visualization and its function. These updates apply to &lt;a target="_blank" rel="nofollow" href="https://docs.okd.io/3.11/welcome/index.html"&gt;OKD 3.11&lt;/a&gt; (the upstream distribution of &lt;a href="https://developers.redhat.com/openshift"&gt;Red Hat OpenShift&lt;/a&gt;), &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift Container Platform&lt;/a&gt; (OCP), and standalone Open Liberty instances.&lt;/p&gt; &lt;p&gt;If you do not already have Grafana and Prometheus set up in your development environment, see the Kabanero guide for &lt;a target="_blank" rel="nofollow" href="https://kabanero.io/guides/app-monitoring-ocp4.2/"&gt;Red Hat OpenShift Container Platform 4.3&lt;/a&gt;. To get started using the Grafana dashboard with Open Liberty, see my blog post introducing &lt;a target="_blank" rel="nofollow" href="https://openliberty.io/blog/2020/04/09/microprofile-3-3-open-liberty-20004.html#gra"&gt;Open Liberty&amp;#8217;s support for MicroProfile 3.3&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You can find the Grafana dashboards for Open Liberty on OKD or OCP in the &lt;a target="_blank" rel="nofollow" href="https://github.com/OpenLiberty/open-liberty-operator/tree/master/deploy/dashboards/metrics"&gt;open-liberty-operator repository&lt;/a&gt;.&lt;/p&gt; &lt;h2 id="STA"&gt;Web application startup changes&lt;/h2&gt; &lt;p&gt;Starting with Open Liberty 20.0.0.6, web applications are considered started only after calls to &lt;code&gt;ServletContainerInitializers&lt;/code&gt; and &lt;code&gt;ServletContextListeners&lt;/code&gt; have completed. This update effectively moves more of the application initialization process into the server-startup route. As a result, it might appear that applications and the server take longer to start. The change doesn&amp;#8217;t affect how long it takes for applications to begin processing requests; it just moves it to run prior to the opening of the ports. In addition, you can now configure the &lt;code&gt;server.xml&lt;/code&gt; so that a failure in a &lt;code&gt;ServletContextListener&lt;/code&gt; will cause application startup to fail. Just add the following:&lt;/p&gt; &lt;pre&gt;&amp;#60;webContainer stopAppStartUponListenerException="true"/&amp;#62; &lt;/pre&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: Find out more &lt;a target="_blank" rel="nofollow" href="https://openliberty.io/docs/ref/config/#application.html"&gt;about application properties here&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Open Liberty 20.0.0.6 is available through &lt;a target="_blank" rel="nofollow" href="https://openliberty.io/downloads/"&gt;Maven, Gradle, Docker, and as a downloadable archive&lt;/a&gt;. Get it today to begin using the new features I&amp;#8217;ve described in this article.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F17%2Fsupport-for-graphql-with-open-liberty-20-0-0-6%2F&amp;#38;linkname=Support%20for%20GraphQL%20with%20Open%20Liberty%2020.0.0.6" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F17%2Fsupport-for-graphql-with-open-liberty-20-0-0-6%2F&amp;#38;linkname=Support%20for%20GraphQL%20with%20Open%20Liberty%2020.0.0.6" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F17%2Fsupport-for-graphql-with-open-liberty-20-0-0-6%2F&amp;#38;linkname=Support%20for%20GraphQL%20with%20Open%20Liberty%2020.0.0.6" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F17%2Fsupport-for-graphql-with-open-liberty-20-0-0-6%2F&amp;#38;linkname=Support%20for%20GraphQL%20with%20Open%20Liberty%2020.0.0.6" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F17%2Fsupport-for-graphql-with-open-liberty-20-0-0-6%2F&amp;#38;linkname=Support%20for%20GraphQL%20with%20Open%20Liberty%2020.0.0.6" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F17%2Fsupport-for-graphql-with-open-liberty-20-0-0-6%2F&amp;#38;linkname=Support%20for%20GraphQL%20with%20Open%20Liberty%2020.0.0.6" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F17%2Fsupport-for-graphql-with-open-liberty-20-0-0-6%2F&amp;#38;linkname=Support%20for%20GraphQL%20with%20Open%20Liberty%2020.0.0.6" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F17%2Fsupport-for-graphql-with-open-liberty-20-0-0-6%2F&amp;#038;title=Support%20for%20GraphQL%20with%20Open%20Liberty%2020.0.0.6" data-a2a-url="https://developers.redhat.com/blog/2020/06/17/support-for-graphql-with-open-liberty-20-0-0-6/" data-a2a-title="Support for GraphQL with Open Liberty 20.0.0.6"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/06/17/support-for-graphql-with-open-liberty-20-0-0-6/"&gt;Support for GraphQL with Open Liberty 20.0.0.6&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/UGqWfpmEp9M" height="1" width="1" alt=""/&gt;</content><summary>The Open Liberty 20.0.0.6 release brings new features, updates, and bug fixes. This article introduces the new features in Open Liberty 20.0.0.6, including support for developing “code-first” GraphQL applications, provisioning features from a Maven repository, and using a server configuration to control application startup. What’s new in Open Liberty 20.0.0.6 Open Liberty 20.0.0.6 includes the fol...</summary><dc:creator>Yasmin.Aumeeruddy</dc:creator><dc:date>2020-06-17T07:00:16Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/06/17/support-for-graphql-with-open-liberty-20-0-0-6/</feedburner:origLink></entry><entry><title>Infinispan Native Server Image</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/LgA3VTJy_pg/" /><category term="docker" scheme="searchisko:content:tags" /><category term="feed_group_name_infinispan" scheme="searchisko:content:tags" /><category term="feed_name_infinispan" scheme="searchisko:content:tags" /><category term="native" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><author><name>Ryan Emerson</name></author><id>searchisko:content:id:jbossorg_blog-infinispan_native_server_image</id><updated>2020-06-16T13:09:10Z</updated><published>2020-06-16T12:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Starting with Infinispan 11, it’s now possible to create a natively compiled version of the Infinispan server.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_tldr"&gt;&lt;a class="anchor" href="#_tldr" /&gt;TL;DR&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;We have a new image that contains a natively compiled Infinispan server and has a footprint of only 286MB. Try it now:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre&gt;docker run -p 11222:11222 quay.io/infinispan/server-native:11.0&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_infinispan_quarkus_extensions"&gt;&lt;a class="anchor" href="#_infinispan_quarkus_extensions" /&gt;Infinispan Quarkus Extensions&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;&lt;a href="https://quarkus.io/"&gt;Quarkus&lt;/a&gt; provides built in support for generating native executables, providing several abstractions to improve the development experience of creating native binaries. Building upon the &lt;a href="https://infinispan.org/blog/2019/11/11/serverng/"&gt;new server&lt;/a&gt;, the Infinispan team have created a &lt;a href="https://github.com/infinispan/infinispan-quarkus"&gt;Quarkus extension&lt;/a&gt; for both embedded and server use-cases. These extensions allow a native binary version of the server to be compiled and ran by simply executing:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre&gt;mvn clean install -Dnative ./server-runner/target/infinispan-quarkus-server-runner-11.0.0.Final-runner -Dquarkus.infinispan-server.config-file=infinispan.xml \ -Dquarkus.infinispan-server.config-path=server/conf \ -Dquarkus.infinispan-server.data-path=data \ -Dquarkus.infinispan-server.server-path=/opt/infinispan &amp;amp;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_native_server_image"&gt;&lt;a class="anchor" href="#_native_server_image" /&gt;Native Server Image&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For many developers compiling your own Infinispan native binary manually is not desirable, therefore we provide the &lt;code&gt;infinispan/server-native&lt;/code&gt; image that uses a native server binary. The advantage of this over our JVM based &lt;code&gt;infinispan/server&lt;/code&gt; image is that we can no provide a much smaller image, 286 vs 468 MB, as we no longer need to include an openjdk JVM in the image.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The &lt;code&gt;server-native&lt;/code&gt; image is configured exactly the same as the JVM based &lt;code&gt;infinispan/server&lt;/code&gt; image. We can run an authenticated Infinispan server with a single user with the following command:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre&gt;docker run -p 11222:11222 -e USER="user" -e PASS="pass" quay.io/infinispan/server-native:11.0&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;From the output below, you can see the Quarkus banner as well various &lt;code&gt;io.quarkus&lt;/code&gt; logs indicating which extensions are being used.&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre&gt;################################################################################ # # # IDENTITIES_PATH not specified # # Generating Identities yaml using USER and PASS env vars. # ################################################################################ 2020-06-16 09:27:39,638 INFO [io.quarkus] (main) config-generator 2.0.0.Final native (powered by Quarkus 1.5.0.Final) started in 0.069s. 2020-06-16 09:27:39,643 INFO [io.quarkus] (main) Profile prod activated. 2020-06-16 09:27:39,643 INFO [io.quarkus] (main) Installed features: [cdi, qute] 2020-06-16 09:27:39,671 INFO [io.quarkus] (main) config-generator stopped in 0.001s 2020-06-16 09:27:40,306 INFO [ListenerBean] (main) The application is starting... 2020-06-16 09:27:40,481 INFO [org.inf.CONTAINER] (main) ISPN000128: Infinispan version: Infinispan 'Corona Extra' 11.0.0.Final 2020-06-16 09:27:40,489 INFO [org.inf.CLUSTER] (main) ISPN000078: Starting JGroups channel infinispan with stack image-tcp 2020-06-16 09:27:45,560 INFO [org.inf.CLUSTER] (main) ISPN000094: Received new cluster view for channel infinispan: [82914efa63fe-12913|0] (1) [82914efa63fe-12913] 2020-06-16 09:27:45,562 INFO [org.inf.CLUSTER] (main) ISPN000079: Channel infinispan local address is 82914efa63fe-12913, physical addresses are [10.0.2.100:7800] 2020-06-16 09:27:45,566 INFO [org.inf.CONTAINER] (main) ISPN000390: Persisted state, version=11.0.0.Final timestamp=2020-06-16T09:27:45.563303Z 2020-06-16 09:27:45,584 INFO [org.inf.CONTAINER] (main) ISPN000104: Using EmbeddedTransactionManager 2020-06-16 09:27:45,617 INFO [org.inf.SERVER] (ForkJoinPool.commonPool-worker-3) ISPN080018: Protocol HotRod (internal) 2020-06-16 09:27:45,618 INFO [org.inf.SERVER] (main) ISPN080018: Protocol REST (internal) 2020-06-16 09:27:45,629 INFO [org.inf.SERVER] (main) ISPN080004: Protocol SINGLE_PORT listening on 10.0.2.100:11222 2020-06-16 09:27:45,629 INFO [org.inf.SERVER] (main) ISPN080034: Server '82914efa63fe-12913' listening on http://10.0.2.100:11222 2020-06-16 09:27:45,629 INFO [org.inf.SERVER] (main) ISPN080001: Infinispan Server 11.0.0.Final started in 5457ms 2020-06-16 09:27:45,629 INFO [io.quarkus] (main) infinispan-quarkus-server-runner 11.0.0.Final native (powered by Quarkus 1.5.0.Final) started in 5.618s. 2020-06-16 09:27:45,629 INFO [io.quarkus] (main) Profile prod activated. 2020-06-16 09:27:45,629 INFO [io.quarkus] (main) Installed features: [cdi, infinispan-embedded, infinispan-server]&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_further_reading"&gt;&lt;a class="anchor" href="#_further_reading" /&gt;Further Reading&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For more detailed information abou how to use the &lt;code&gt;infinispan/server&lt;/code&gt; and &lt;code&gt;infinispan/server-native&lt;/code&gt; image, please consult the &lt;a href="https://github.com/infinispan/infinispan-images/blob/master/README.md"&gt;official documentation&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_get_it_use_it_ask_us"&gt;&lt;a class="anchor" href="#_get_it_use_it_ask_us" /&gt;Get it, Use it, Ask us!&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The Quarkus extension and the &lt;code&gt;server-native&lt;/code&gt; image are currently provided as a tech preview, so please try them out and let us know if you run into any issues.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Please &lt;a href="http://infinispan.org/download/"&gt;download&lt;/a&gt;, &lt;a href="https://issues.jboss.org/projects/ISPN"&gt;report bugs&lt;/a&gt;, &lt;a href="https://infinispan.zulipchat.com/"&gt;chat with us&lt;/a&gt;, ask questions on &lt;a href="https://stackoverflow.com/questions/tagged/?tagnames=infinispan&amp;amp;sort=newest"&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/LgA3VTJy_pg" height="1" width="1" alt=""/&gt;</content><summary>Starting with Infinispan 11, it’s now possible to create a natively compiled version of the Infinispan server. TL;DR We have a new image that contains a natively compiled Infinispan server and has a footprint of only 286MB. Try it now: docker run -p 11222:11222 quay.io/infinispan/server-native:11.0 Infinispan Quarkus Extensions Quarkus provides built in support for generating native executables, p...</summary><dc:creator>Ryan Emerson</dc:creator><dc:date>2020-06-16T12:00:00Z</dc:date><feedburner:origLink>http://infinispan.org/blog/2020/06/16/native-server-announce/</feedburner:origLink></entry><entry><title>Enable Eclipse MicroProfile applications on Red Hat JBoss Enterprise Application Platform 7.3</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/ymljsPxTiCY/" /><category term="CodeReady Studio" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="devops" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="microprofile" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="opentracing" scheme="searchisko:content:tags" /><author><name>Emmanuel Hugonnet</name></author><id>searchisko:content:id:jbossorg_blog-enable_eclipse_microprofile_applications_on_red_hat_jboss_enterprise_application_platform_7_3</id><updated>2020-06-16T07:00:49Z</updated><published>2020-06-16T07:00:49Z</published><content type="html">&lt;p&gt;In this article, we show you how to install &lt;a href="https://developers.redhat.com/products/eap/overview"&gt;Red Hat JBoss Enterprise Application Platform (JBoss EAP)&lt;/a&gt; XP 1.0.0.GA and enable Eclipse MicroProfile support on JBoss EAP. Once you have MicroProfile support enabled, you can start using the quickstart examples or start developing your own application.&lt;/p&gt; &lt;p&gt;You can find a demo video at the end of this article.&lt;/p&gt; &lt;p&gt;&lt;span id="more-722437"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Installing JBoss EAP XP 1.0.0.GA&lt;/h2&gt; &lt;p&gt;To install &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html?product=appplatform.xp&amp;#38;downloadType=distributions"&gt;JBoss EAP XP 1.0.0.GA&lt;/a&gt;:&lt;/p&gt; &lt;ol&gt; &lt;li class="listitem"&gt; &lt;p class="simpara"&gt;Download the following software from the product download page:&lt;/p&gt; &lt;div class="itemizedlist"&gt; &lt;ul class="itemizedlist" type="disc"&gt; &lt;li class="listitem"&gt;JBoss EAP XP manager&lt;/li&gt; &lt;li class="listitem"&gt;JBoss EAP 7.3.1 GA patch&lt;/li&gt; &lt;li class="listitem"&gt;JBoss EAP XP 1.0&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/li&gt; &lt;li class="listitem"&gt; &lt;p class="simpara"&gt;Apply the JBoss EAP 7.3.1 GA patch:&lt;/p&gt; &lt;pre class="screen"&gt;$ patch apply /&lt;span class="emphasis"&gt;&lt;em&gt;DOWNLOAD/PATH&lt;/em&gt;&lt;/span&gt;/jboss-eap-7.3.1-patch.zip&lt;/pre&gt; &lt;/li&gt; &lt;li class="listitem"&gt; &lt;p class="simpara"&gt;Set up JBoss EAP XP manager using the following CLI command:&lt;/p&gt; &lt;pre class="screen"&gt;$ java -jar jboss-eap-xp-1.0.0.GA-CR1-manager.jar setup --jboss-home=/INSTALL_PATH/jboss-eap-7.3&lt;/pre&gt; &lt;/li&gt; &lt;li class="listitem"&gt; &lt;p class="simpara"&gt;Apply the JBoss EAP XP 1.0 patch using the following management command:&lt;/p&gt; &lt;pre class="screen"&gt;$ patch apply /&lt;span class="emphasis"&gt;&lt;em&gt;DOWNLOAD/PATH&lt;/em&gt;&lt;/span&gt;/jboss-eap-xp-1.0.0.GA-patch.zip&lt;/pre&gt; &lt;/li&gt; &lt;/ol&gt; &lt;h2&gt;Configure CodeReady Studio&lt;/h2&gt; &lt;p&gt;To enable Eclipse MicroProfile support on JBoss EAP, we first need to register a new runtime server for JBoss EAP XP 1.0.0 (which we just installed). For this, we will create a new JBoss EAP 7.3.0 server called Red Hat JBoss EAP 7.3 XP 1.0.&lt;/p&gt; &lt;p&gt;This server will use a newly created JBoss EAP 7.3 XP 1.0 Runtime that points to the newly installed runtime and uses the &lt;code&gt;standalone-microprofile.xml&lt;/code&gt; configuration file. Set up the &lt;strong&gt;New Server&lt;/strong&gt; dialog box as shown in Figure 1:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Select server type &lt;strong&gt;Red Hat JBoss Enterprise Application Platform 7.3&lt;/strong&gt;.&lt;/li&gt; &lt;li&gt;Set &lt;strong&gt;Server&amp;#8217;s host name&lt;/strong&gt; to &lt;code&gt;localhost&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;In &lt;strong&gt;Server name&lt;/strong&gt;, enter &lt;code&gt;Red Hat JBoss EAP 7.3 XP 1.0&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Click &lt;strong&gt;Next&lt;/strong&gt;.&lt;/li&gt; &lt;/ol&gt; &lt;div id="attachment_723207" style="width: 631px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-723207" class="wp-image-723207 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/05/create_server_1.png" alt="New Server dialog box with the specified options selected" width="621" height="590" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/05/create_server_1.png 621w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/create_server_1-300x285.png 300w" sizes="(max-width: 621px) 100vw, 621px" /&gt;&lt;p id="caption-attachment-723207" class="wp-caption-text"&gt;Figure 1: Define your new server.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;In the next dialog box, configure your new server as shown in Figure 2:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Set the &lt;strong&gt;Home Directory&lt;/strong&gt; if you don&amp;#8217;t want to use the default setting.&lt;/li&gt; &lt;li&gt;Make sure your &lt;strong&gt;Execution Environment&lt;/strong&gt; is set to &lt;strong&gt;JavaSE-1.8&lt;/strong&gt;.&lt;/li&gt; &lt;li&gt;Change the settings for &lt;strong&gt;Server base directory&lt;/strong&gt; and &lt;strong&gt;Configuration file&lt;/strong&gt; if you don&amp;#8217;t want the defaults.&lt;/li&gt; &lt;li&gt;Click &lt;strong&gt;Finish&lt;/strong&gt;.&lt;/li&gt; &lt;/ol&gt; &lt;div id="attachment_723197" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/05/create_server_2.png"&gt;&lt;img aria-describedby="caption-attachment-723197" class="wp-image-723197 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/05/create_server_2-1024x561.png" alt="New Server dialog box for configuring the JBoss Runtime" width="640" height="351" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/05/create_server_2-1024x561.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/create_server_2-300x164.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/create_server_2-768x421.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/create_server_2.png 1077w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-723197" class="wp-caption-text"&gt;Figure 2: Configure your new server.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;In order to use the &lt;strong&gt;microprofile-opentracing&lt;/strong&gt; quickstart (Figure 5) we need to set environment variables on our runtime. To do so, in the Red Hat JBoss EAP 7.3 XP 1.0 server &lt;strong&gt;Overview&lt;/strong&gt; dialog box shown in Figure 3, click &lt;strong&gt;Open launch configuration&lt;/strong&gt;.&lt;/p&gt; &lt;div id="attachment_723247" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/05/server_environment_1.png"&gt;&lt;img aria-describedby="caption-attachment-723247" class="wp-image-723247 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/05/server_environment_1-1024x672.png" alt="dialog box showing an overview of the server's settings" width="640" height="420" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/05/server_environment_1-1024x672.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/server_environment_1-300x197.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/server_environment_1-768x504.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/server_environment_1.png 1340w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-723247" class="wp-caption-text"&gt;Figure 3: Set environment variables from the server Overview dialog box.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;In particular, you need to create three environment variables as shown in Figure 4:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;JAEGER_REPORTER_LOG_SPANS&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code&gt;JAEGER_SAMPLER_PARAM&lt;/code&gt; set to &lt;code&gt;1&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code&gt;JAEGER_SAMPLER_TYPE&lt;/code&gt; set to &lt;code&gt;const&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;div id="attachment_723257" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/05/server_environment_2.png"&gt;&lt;img aria-describedby="caption-attachment-723257" class="wp-image-723257" src="https://developers.redhat.com/blog/wp-content/uploads/2020/05/server_environment_2.png" alt="dialog box showing the newly created environment variables" width="640" height="648" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/05/server_environment_2.png 950w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/server_environment_2-296x300.png 296w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/server_environment_2-768x778.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-723257" class="wp-caption-text"&gt;Figure 4: Configure your runtime&amp;#8217;s environment variables.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Use the quickstarts&lt;/h2&gt; &lt;p&gt;Select the Quickstart Parent &lt;code&gt;pom.xml&lt;/code&gt; to import it as shown in Figure 5, and you are ready to go.&lt;/p&gt; &lt;div id="attachment_723537" style="width: 648px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-723537" class="wp-image-723537 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/05/import_quickstarts.png" alt="Project Explorer with quickstart-parent selected." width="638" height="466" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/05/import_quickstarts.png 638w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/import_quickstarts-300x219.png 300w" sizes="(max-width: 638px) 100vw, 638px" /&gt;&lt;p id="caption-attachment-723537" class="wp-caption-text"&gt;Figure 5: Import quickstart-parent to turn on kickstarts.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;With the kickstarts turned on, you have simple examples that you can run and test on your installed server covering:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Eclipse MicroProfile Config&lt;/li&gt; &lt;li&gt;Eclipse MicroProfile Fault-tolerance&lt;/li&gt; &lt;li&gt;Eclipse MicroProfile Health&lt;/li&gt; &lt;li&gt;Eclipse MicroProfile JWT&lt;/li&gt; &lt;li&gt;Eclipse MicroProfile Metrics&lt;/li&gt; &lt;li&gt;Eclipse MicroProfile OpenAPI&lt;/li&gt; &lt;li&gt;Eclipse MicroProfile OpenTracing&lt;/li&gt; &lt;li&gt;Eclipse MicroProfile REST Client&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information about Eclipse MicroProfile take a look at &lt;a href="https://projects.eclipse.org/projects/technology.microprofile/releases/microprofile-3.3"&gt;the specifications&lt;/a&gt;, check out &lt;a target="_blank" rel="nofollow" href="https://start.microprofile.io/"&gt;MicroProfile Starter&lt;/a&gt;. If you prefer to watch a demo, check it out here:&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/5sblsEHFQu4?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F16%2Fenable-eclipse-microprofile-applications-on-red-hat-jboss-enterprise-application-platform-7-3%2F&amp;#38;linkname=Enable%20Eclipse%20MicroProfile%20applications%20on%20Red%20Hat%20JBoss%20Enterprise%20Application%20Platform%207.3" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F16%2Fenable-eclipse-microprofile-applications-on-red-hat-jboss-enterprise-application-platform-7-3%2F&amp;#38;linkname=Enable%20Eclipse%20MicroProfile%20applications%20on%20Red%20Hat%20JBoss%20Enterprise%20Application%20Platform%207.3" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F16%2Fenable-eclipse-microprofile-applications-on-red-hat-jboss-enterprise-application-platform-7-3%2F&amp;#38;linkname=Enable%20Eclipse%20MicroProfile%20applications%20on%20Red%20Hat%20JBoss%20Enterprise%20Application%20Platform%207.3" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F16%2Fenable-eclipse-microprofile-applications-on-red-hat-jboss-enterprise-application-platform-7-3%2F&amp;#38;linkname=Enable%20Eclipse%20MicroProfile%20applications%20on%20Red%20Hat%20JBoss%20Enterprise%20Application%20Platform%207.3" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F16%2Fenable-eclipse-microprofile-applications-on-red-hat-jboss-enterprise-application-platform-7-3%2F&amp;#38;linkname=Enable%20Eclipse%20MicroProfile%20applications%20on%20Red%20Hat%20JBoss%20Enterprise%20Application%20Platform%207.3" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F16%2Fenable-eclipse-microprofile-applications-on-red-hat-jboss-enterprise-application-platform-7-3%2F&amp;#38;linkname=Enable%20Eclipse%20MicroProfile%20applications%20on%20Red%20Hat%20JBoss%20Enterprise%20Application%20Platform%207.3" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F16%2Fenable-eclipse-microprofile-applications-on-red-hat-jboss-enterprise-application-platform-7-3%2F&amp;#38;linkname=Enable%20Eclipse%20MicroProfile%20applications%20on%20Red%20Hat%20JBoss%20Enterprise%20Application%20Platform%207.3" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F16%2Fenable-eclipse-microprofile-applications-on-red-hat-jboss-enterprise-application-platform-7-3%2F&amp;#038;title=Enable%20Eclipse%20MicroProfile%20applications%20on%20Red%20Hat%20JBoss%20Enterprise%20Application%20Platform%207.3" data-a2a-url="https://developers.redhat.com/blog/2020/06/16/enable-eclipse-microprofile-applications-on-red-hat-jboss-enterprise-application-platform-7-3/" data-a2a-title="Enable Eclipse MicroProfile applications on Red Hat JBoss Enterprise Application Platform 7.3"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/06/16/enable-eclipse-microprofile-applications-on-red-hat-jboss-enterprise-application-platform-7-3/"&gt;Enable Eclipse MicroProfile applications on Red Hat JBoss Enterprise Application Platform 7.3&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/ymljsPxTiCY" height="1" width="1" alt=""/&gt;</content><summary>In this article, we show you how to install Red Hat JBoss Enterprise Application Platform (JBoss EAP) XP 1.0.0.GA and enable Eclipse MicroProfile support on JBoss EAP. Once you have MicroProfile support enabled, you can start using the quickstart examples or start developing your own application. You can find a demo video at the end of this article. Installing JBoss EAP XP 1.0.0.GA To install JBos...</summary><dc:creator>Emmanuel Hugonnet</dc:creator><dc:date>2020-06-16T07:00:49Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/06/16/enable-eclipse-microprofile-applications-on-red-hat-jboss-enterprise-application-platform-7-3/</feedburner:origLink></entry><entry><title>Enterprise Kubernetes development with odo: The CLI tool for developers</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/gXynXpeiVwY/" /><category term="application deployment" scheme="searchisko:content:tags" /><category term="ci/cd" scheme="searchisko:content:tags" /><category term="command-line tool" scheme="searchisko:content:tags" /><category term="debug application" scheme="searchisko:content:tags" /><category term="Developer Tools" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="kubernetes development" scheme="searchisko:content:tags" /><category term="Node.js" scheme="searchisko:content:tags" /><category term="openshift do" scheme="searchisko:content:tags" /><category term="Programming Languages" scheme="searchisko:content:tags" /><author><name>Jason Dudash</name></author><id>searchisko:content:id:jbossorg_blog-enterprise_kubernetes_development_with_odo_the_cli_tool_for_developers</id><updated>2020-06-16T07:00:41Z</updated><published>2020-06-16T07:00:41Z</published><content type="html">&lt;p&gt;Kubernetes conversations rarely center the developer&amp;#8217;s perspective. As a result, doing our job in a k8s cluster often requires building complicated YAML resource files, writing custom shell scripts, and understanding the countless options that are available in &lt;code&gt;kubectl&lt;/code&gt; and &lt;code&gt;docker&lt;/code&gt; commands. On top of all of that, we have the learning curve of understanding Kubernetes terminology and using it the way that operations teams do.&lt;/p&gt; &lt;p&gt;To address these challenges, the Red Hat Developer Tools team created &lt;a href="https://developers.redhat.com/products/odo/overview"&gt;&lt;code&gt;odo&lt;/code&gt; (OpenShift Do)&lt;/a&gt;, a command-line interface (CLI) tool built for developers and designed to prioritize the things that developers care about. In this article, I will use a hands-on example to introduce you to the benefits of using &lt;code&gt;odo&lt;/code&gt; in conjunction with Kubernetes.&lt;/p&gt; &lt;h2&gt;Improving the developer workflow&lt;/h2&gt; &lt;p&gt;First, let&amp;#8217;s consider a typical workflow for a developer whose team has adopted &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt;. The workflow starts with local development activities and finishes with &lt;a href="https://developers.redhat.com/topics/containers/"&gt;containers&lt;/a&gt; deployed and code running in one or more Kubernetes clusters. To help visualize this flow, you can think of it in terms of an inner loop and an outer loop. The &lt;i&gt;inner loop&lt;/i&gt; consists of local coding, building, running, and testing the application—all activities that you, as a developer, can control. The &lt;i&gt;outer loop&lt;/i&gt; consists of the larger team processes that your code flows through on its way to the cluster: code reviews, integration tests, security and compliance, and so on. The inner loop could happen mostly on your laptop. The outer loop happens on shared servers and runs in containers, and is often automated with continuous integration/continuous delivery (CI/CD) pipelines. Usually, a code commit to source control is the transition point between the inner and outer loops. Figure 1 illustrates the interplay of these loops in a Kubernetes development process.&lt;/p&gt; &lt;div id="attachment_720877" style="width: 455px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/05/To-Staging.png"&gt;&lt;img aria-describedby="caption-attachment-720877" class="wp-image-720877 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/05/To-Staging.png" alt="A flow diagram of the inner and outer loops in a Kubernetes development process." width="445" height="439" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/05/To-Staging.png 445w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/To-Staging-300x296.png 300w" sizes="(max-width: 445px) 100vw, 445px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-720877" class="wp-caption-text"&gt;Figure 1. A flow diagram of the inner and outer loops in a Kubernetes development process.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Notice that, while you code, you are constantly iterating through various development activities: You code, build, deploy locally, and debug—and you keep going until you achieve a degree of feature completeness. At some point, you will be ready to transition from inner to outer, right? Not so quick.&lt;/p&gt; &lt;h3&gt;Deploying from the inner loop&lt;/h3&gt; &lt;p&gt;You might think that your job stops at local testing and a Git pull request (or a &lt;code&gt;git push&lt;/code&gt;)—but that&amp;#8217;s not usually the case. You will still need to ensure that your code functions correctly in containers, runs in the cluster, and plays nicely with other containerized components. Therefore, you will want some iterations of your inner loop to deploy and debug directly into the Kubernetes cluster.&lt;/p&gt; &lt;p&gt;Here&amp;#8217;s a list of steps you might typically follow to deploy from the inner loop:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Describe how to configure the OS for your container: &lt;ul&gt; &lt;li&gt;Write a Dockerfile to set up Linux.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Describe how to package your app into a container image: &lt;ul&gt; &lt;li&gt;Update the Dockerfile.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Create a container image: &lt;ul&gt; &lt;li&gt;Issue the commands &lt;code&gt;docker build&lt;/code&gt; and &lt;code&gt;docker tag&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Upload the container image to a registry: &lt;ul&gt; &lt;li&gt;Issue a &lt;code&gt;docker push.&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Write one or more Kubernetes or OpenShift resource files: &lt;ul&gt; &lt;li&gt;Write lots of YAML.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Deploy your app to the cluster: &lt;ul&gt; &lt;li&gt;Issue the command: &lt;code&gt;kubectl apply -f my_app.yaml&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Deploy other services to the cluster: &lt;ul&gt; &lt;li&gt;Issue the command: &lt;code&gt;kubectl apply -f svc*.yaml&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Write the config (or set &lt;code&gt;ENV&lt;/code&gt;) to allow apps to work together: &lt;ul&gt; &lt;li&gt;Issue a &lt;code&gt;kubectl create configmap&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Configure apps to work together correctly: &lt;ul&gt; &lt;li&gt;Issue a &lt;code&gt;kubectl apply -f my_configmap.yaml&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;That&amp;#8217;s a lot of steps!&lt;/p&gt; &lt;h3&gt;Enter, odo&lt;/h3&gt; &lt;p&gt;Red Hat OpenShift&amp;#8217;s &lt;code&gt;oc&lt;/code&gt; CLI tool can help make many of those steps easier; however, &lt;code&gt;oc&lt;/code&gt; is operations focused. Using it requires a deep understanding of Kubernetes and OpenShift concepts. Odo, on the other hand, was designed to be simple and concise:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Its syntax and design center concepts familiar to developers, such as projects, applications, and components.&lt;/li&gt; &lt;li&gt;It automates the creation of deployment configurations, build configurations, service routes, and other OpenShift elements.&lt;/li&gt; &lt;li&gt;It is designed for quick iterations—as an example, it detects changes to local code and deploys to the cluster automatically, giving developers instant feedback to validate changes in realtime.&lt;/li&gt; &lt;li&gt;It is completely client-based, so no server-side-component setup is required.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Odo also offers:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Red Hat support for &lt;a href="https://developers.redhat.com/blog/category/node-js/"&gt;Node.js&lt;/a&gt; and &lt;a href="https://developers.redhat.com/topics/enterprise-java/"&gt;Java&lt;/a&gt; components.&lt;/li&gt; &lt;li&gt;Compatibility with other languages such as Ruby, Perl, PHP, and Python.&lt;/li&gt; &lt;li&gt;Status updates for components and services on the cluster.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Odo works from any terminal on the Windows, macOS, and Linux operating systems, and it supports autocompletion for &lt;code&gt;bash&lt;/code&gt; and &lt;code&gt;zsh&lt;/code&gt; command-line shells.&lt;/p&gt; &lt;p&gt;That&amp;#8217;s enough overview. Let&amp;#8217;s see &lt;code&gt;odo&lt;/code&gt; in action.&lt;/p&gt; &lt;h2&gt;Hands-on development with Odo&lt;/h2&gt; &lt;p&gt;If you want to follow along with this example, start by &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.4/cli_reference/openshift_developer_cli/installing-odo.html"&gt;downloading &lt;code&gt;odo&lt;/code&gt; for your platform of choice&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For macOS, the command is:&lt;/p&gt; &lt;pre&gt;&amp;#62; curl -L https://mirror.openshift.com/pub/openshift-v4/clients/odo/latest/odo-darwin-amd64 -o /usr/local/bin/odo &amp;#38;&amp;#38; chmod +x /usr/local/bin/odo &lt;/pre&gt; &lt;p&gt;For Linux, it&amp;#8217;s:&lt;/p&gt; &lt;pre&gt;&amp;#62; curl -L https://mirror.openshift.com/pub/openshift-v4/clients/odo/latest/odo-linux-amd64 -o /usr/local/bin/odo &amp;#38;&amp;#38; chmod +x /usr/local/bin/odo &lt;/pre&gt; &lt;p&gt;Next, &lt;a target="_blank" rel="nofollow" href="https://github.com/RedHatGov/openshift-workshops.git"&gt;clone the example source code&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&amp;#62; git clone https://github.com/RedHatGov/openshift-workshops.git &amp;#62; cd openshift-workshops/dc-metro-map &lt;/pre&gt; &lt;p&gt;If you aren&amp;#8217;t already logged in to your cluster with &lt;code&gt;oc&lt;/code&gt;, run this and enter your login info:&lt;/p&gt; &lt;pre&gt;&amp;#62; odo login https://api.yourcluster.com:6443 &lt;/pre&gt; &lt;p&gt;Alternatively, you could use the following link to get a token-based login (note that you must update the URL with your cluster&amp;#8217;s domain name): &lt;code&gt;https://oauth-openshift.apps.yourcluster.com/oauth/token/display&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;We now have a setup for a sample Node.js application. In the next sections, I&amp;#8217;ll show you how to use &lt;code&gt;odo&lt;/code&gt; to deploy the app to a Kubernetes cluster; configure and connect the app to other services; and update an environment variable and verify the changes in a web browser. I&amp;#8217;ll conclude by showing you how to do a simple code change and quickly iterate through the development process before propagating your local code back into the Kubernetes cluster.&lt;/p&gt; &lt;h3&gt;Part 1: Deploy the app&lt;/h3&gt; &lt;p&gt;The first thing you&amp;#8217;ll do is set up a new project and deploy it on a Kubernetes cluster.&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Create a project that only you can work in by entering a command similar to the one below: &lt;pre&gt;&amp;#62; odo project create jasons-odo &lt;/pre&gt; &lt;p&gt;You should see output similar to mine below:&lt;/p&gt; &lt;pre&gt;✓ Project 'jasons-odo' is ready for use ✓ New project created and now using project: jasons-odo &lt;/pre&gt; &lt;/li&gt; &lt;li&gt;Create a Node.js component for the new project: &lt;pre&gt;&amp;#62; odo create nodejs &lt;/pre&gt; &lt;p&gt;The output should look something like this:&lt;/p&gt; &lt;pre&gt;✓ Validating component [61ms] Please use `odo push` command to create the component with source deployed &lt;/pre&gt; &lt;/li&gt; &lt;li&gt;Push the changes—in this case, a new component and the example application code—to the cluster: &lt;pre&gt;&amp;#62; odo push &lt;/pre&gt; &lt;p&gt;You should see something like this:&lt;/p&gt; &lt;pre&gt;Validation ✓ Checking component [116ms] Configuration changes ✓ Initializing component ✓ Creating component [336ms] Pushing to component nodejs-dc-metro-map-zvff of type local ✓ Checking files for pushing [2ms] ✓ Waiting for component to start [1m] ✓ Syncing files to the component [7s] ✓ Building component [32s] ✓ Changes successfully pushed to component &lt;/pre&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;The code is now running in a container on the cluster. But we also want to create a URL route into the code so that we can view the running application in a web browser. Next steps:&lt;/p&gt; &lt;ol start="4"&gt; &lt;li&gt;Expose an HTTP route into your Node.js app: &lt;pre&gt;&amp;#62; odo url create --port 8080&lt;/pre&gt; &lt;p&gt;Check the output:&lt;/p&gt; &lt;pre&gt;✓ URL nodejs-dc-metro-map-zvff-8080 created for component: nodejs-dc-metro-map-zvff To create URL on the OpenShift Cluster, please use `odo push` &lt;/pre&gt; &lt;/li&gt; &lt;li&gt;Push the new URL change to the cluster: &lt;pre&gt;&amp;#62; odo push &lt;/pre&gt; &lt;p&gt;Check the output:&lt;/p&gt; &lt;pre&gt;Validation ✓ Checking component [88ms] Configuration changes ✓ Retrieving component data [107ms] ✓ Applying configuration [107ms] Applying URL changes ✓ URL nodejs-dc-metro-map-zvff-8080: http://nodejs-dc-metro-map-zvff-8080-app-jasons-odo.apps.yourcluster.com created Pushing to component nodejs-dc-metro-map-zvff of type local ✓ Checking file changes for pushing [7ms] ✓ No file changes detected, skipping build. Use the '-f' flag to force the build. &lt;/pre&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;To verify that the deployment has worked, locate the URL in the command output just shown (or run &lt;code&gt;odo url list&lt;/code&gt;) and try opening it in your web browser. You should see something like the map in Figure 2.&lt;/p&gt; &lt;div id="attachment_720847" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Map-1.png"&gt;&lt;img aria-describedby="caption-attachment-720847" class="wp-image-720847 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Map-1-1024x860.png" alt="A map of transit stops in Washington DC's Federal Triangle." width="640" height="538" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Map-1-1024x860.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/Map-1-300x252.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/Map-1-768x645.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/Map-1.png 1600w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-720847" class="wp-caption-text"&gt;Figure 2. A map of transit stops in Washington D.C.&amp;#8217;s Federal Triangle.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Part 2: Configure and connect the app to other services&lt;/h3&gt; &lt;p&gt;Next, you&amp;#8217;ll use &lt;code&gt;odo&lt;/code&gt; to add a database dependency to your Node.js app. For this to work, your cluster will need to have both OpenShift &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.4/applications/service_brokers/installing-service-catalog.html"&gt; Service Catalog&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.4/applications/service_brokers/installing-template-service-broker.html"&gt;Template Service Broker&lt;/a&gt; installed.&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Create the database and pass-in the defaults for config variables: &lt;pre&gt;&amp;#62; odo service create mongodb-persistent --plan default --wait \ -p DATABASE_SERVICE_NAME=mongodb -p MEMORY_LIMIT=512Mi \ -p MONGODB_DATABASE=sampledb -p VOLUME_CAPACITY=1Gi &lt;/pre&gt; &lt;p&gt;Here&amp;#8217;s the output:&lt;/p&gt; &lt;pre&gt;Deploying service mongodb-persistent of type: mongodb-persistent ✓ Deploying service [55ms] ✓ Waiting for service to come up [3m] ✓ Service 'mongodb-persistent' is ready for use &lt;/pre&gt; &lt;p&gt;Optionally, link &lt;code&gt;mongodb-persistent&lt;/code&gt; to your component by running: &lt;code&gt;odo link&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Provide your Node.js app with the database credentials and other secrets needed to configure and connect to the database: &lt;pre&gt;&amp;#62; odo link mongodb-persistent &lt;/pre&gt; &lt;p&gt;You should see something like the following output:&lt;/p&gt; &lt;pre&gt;✓ Service mongodb-persistent has been successfully linked to the component nodejs-dc-metro-map-zvff The below secret environment variables were added to the 'nodejs-dc-metro-map-zvff' component: admin_password database_name password uri username You can now access the environment variables from within the component pod, for example: $uri is now available as a variable within component nodejs-dc-metro-map-zvff &lt;/pre&gt; &lt;/li&gt; &lt;/ol&gt; &lt;h3&gt;Part 3: Update the environment variables&lt;/h3&gt; &lt;p&gt;Let&amp;#8217;s say you need to update some &lt;code&gt;env vars&lt;/code&gt; for your containerized Node.js app. Doing that with &lt;code&gt;odo&lt;/code&gt; is really straightforward.&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Tell &lt;code&gt;odo&lt;/code&gt; what &lt;code&gt;env var&lt;/code&gt; to add or update: &lt;pre&gt;&amp;#62; odo config set --env BEERME=true &lt;/pre&gt; &lt;p&gt;You should see something like the following output:&lt;/p&gt; &lt;pre&gt; ✓ Environment variables were successfully updated Run `odo push --config` command to apply changes to the cluster. &lt;/pre&gt; &lt;/li&gt; &lt;li&gt;Push the changes with the new &lt;code&gt;env var&lt;/code&gt; to the cluster: &lt;pre&gt;&amp;#62; odo push --config &lt;/pre&gt; &lt;p&gt;You should see something like this:&lt;/p&gt; &lt;pre&gt;Validation ✓ Checking component [84ms] Configuration changes ✓ Retrieving component data [96ms] ✓ Applying configuration [40s] Applying URL changes ✓ URL nodejs-dc-metro-map-zvff-8080 already exists &lt;/pre&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Now refresh the page in your web browser. You&amp;#8217;ll see that the new &lt;code&gt;env&lt;/code&gt; has taken effect. Your map icons should now look like pint glasses, as shown in Figure 3.&lt;/p&gt; &lt;div id="attachment_720857" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Map-2.png"&gt;&lt;img aria-describedby="caption-attachment-720857" class="wp-image-720857 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Map-2-1024x938.png" alt="The updated map shows the effect of changing the environment variable." width="640" height="586" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Map-2-1024x938.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/Map-2-300x275.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/Map-2-768x703.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/Map-2.png 1352w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-720857" class="wp-caption-text"&gt;Figure 3. The updated map icons verify that changing the environment variable worked.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Part 4: Iterate the inner loop&lt;/h3&gt; &lt;p&gt;In this last part, I&amp;#8217;ll show you how to do a simple code change with &lt;code&gt;odo&lt;/code&gt;. I&amp;#8217;ll also demonstrate how iterating on your inner loop easily propagates local code into the cluster deployment.&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Edit the local file &lt;code&gt;public/assets/stations.geojson&lt;/code&gt; to add a new bus stop. Append it to the bottom of the file, right after Ronald Reagan Washington National Airport: &lt;pre&gt;&amp;#62; vim public/assets/stations.geojson { "type": "Feature", "properties": { "name": "Presidential Metro Stop", "marker-color": "#ffd700", "marker-symbol": "rail-metro", "line": "blue" }, "geometry": { "type": "Point", "coordinates": [ -77.0365, 38.8977 ] } } &lt;/pre&gt; &lt;/li&gt; &lt;li&gt;Push changes to the cluster: &lt;pre&gt;&amp;#62; odo push&lt;/pre&gt; &lt;p&gt;You should see the following output:&lt;/p&gt; &lt;pre&gt;Validation ✓ Checking component [86ms] Configuration changes ✓ Retrieving component data [96ms] ✓ Applying configuration [114ms] Applying URL changes ✓ URL nodejs-dc-metro-map-zvff-8080 already exists Pushing to component nodejs-dc-metro-map-zvff of type local ✓ Checking file changes for pushing [3ms] ✓ Waiting for component to start [23ms] ✓ Syncing files to the component [1s] ✓ Building component [3s] ✓ Changes successfully pushed to component &lt;/pre&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Now, refresh the web page. You should see that there&amp;#8217;s a new transit stop for the White House, as shown in Figure 4.&lt;/p&gt; &lt;div id="attachment_720867" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Map-3.png"&gt;&lt;img aria-describedby="caption-attachment-720867" class="wp-image-720867 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Map-3-1024x751.png" alt="An updated map with a new bus icon located at the White House." width="640" height="469" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Map-3-1024x751.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/Map-3-300x220.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/Map-3-768x563.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/Map-3.png 1584w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-720867" class="wp-caption-text"&gt;Figure 4. The updated map shows that code changes have been successfully pushed to the deployed cluster.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;In this article, I showed you how to use &lt;code&gt;odo&lt;/code&gt; for a variety of day-to-day development activities (what I call the inner loop of a Kubernetes-based development process). I also showed you how to deploy and debug iterations of your inner loop directly into the Kubernetes cluster.&lt;/p&gt; &lt;p&gt;We completed all of the tasks required to develop and deploy the example application without writing any YAML, without &lt;code&gt;bash&lt;/code&gt; scripts, and without needing to understand the deep concepts of Kubernetes operations. Instead, we used the CLI and just a handful of commands—&lt;code&gt;odo&lt;/code&gt;, &lt;code&gt;project&lt;/code&gt;, &lt;code&gt;create&lt;/code&gt;, &lt;code&gt;push&lt;/code&gt;, &lt;code&gt;service&lt;/code&gt;, &lt;code&gt;url&lt;/code&gt;, &lt;code&gt;link&lt;/code&gt;, &lt;code&gt;config&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Odo can do a few things I didn&amp;#8217;t cover in this article. See the &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.4/cli_reference/openshift_developer_cli/understanding-odo.html"&gt;official odo documentation&lt;/a&gt; to learn more about its full capabilities.&lt;/p&gt; &lt;p&gt;Also, if you liked the concepts in this article but really don&amp;#8217;t like using a CLI, Red Hat has you covered. We&amp;#8217;ve embedded &lt;code&gt;odo&lt;/code&gt; into a &lt;a target="_blank" rel="nofollow" href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-openshift-connector"&gt;VS Code plugin&lt;/a&gt; and a &lt;a target="_blank" rel="nofollow" href="https://plugins.jetbrains.com/plugin/12030-openshift-connector-by-red-hat"&gt;JetBrains plugin&lt;/a&gt;, so that you can get the same capability directly in an IDE.&lt;/p&gt; &lt;p&gt;Odo is just one of the awesome tools that Red Hat has been working on to make it easier for developers to build modern applications with open source software. Stay tuned for more articles introducing these tools that are tailored just for developers.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F16%2Fenterprise-kubernetes-development-with-odo-the-cli-tool-for-developers%2F&amp;#38;linkname=Enterprise%20Kubernetes%20development%20with%20odo%3A%20The%20CLI%20tool%20for%20developers" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F16%2Fenterprise-kubernetes-development-with-odo-the-cli-tool-for-developers%2F&amp;#38;linkname=Enterprise%20Kubernetes%20development%20with%20odo%3A%20The%20CLI%20tool%20for%20developers" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F16%2Fenterprise-kubernetes-development-with-odo-the-cli-tool-for-developers%2F&amp;#38;linkname=Enterprise%20Kubernetes%20development%20with%20odo%3A%20The%20CLI%20tool%20for%20developers" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F16%2Fenterprise-kubernetes-development-with-odo-the-cli-tool-for-developers%2F&amp;#38;linkname=Enterprise%20Kubernetes%20development%20with%20odo%3A%20The%20CLI%20tool%20for%20developers" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F16%2Fenterprise-kubernetes-development-with-odo-the-cli-tool-for-developers%2F&amp;#38;linkname=Enterprise%20Kubernetes%20development%20with%20odo%3A%20The%20CLI%20tool%20for%20developers" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F16%2Fenterprise-kubernetes-development-with-odo-the-cli-tool-for-developers%2F&amp;#38;linkname=Enterprise%20Kubernetes%20development%20with%20odo%3A%20The%20CLI%20tool%20for%20developers" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F16%2Fenterprise-kubernetes-development-with-odo-the-cli-tool-for-developers%2F&amp;#38;linkname=Enterprise%20Kubernetes%20development%20with%20odo%3A%20The%20CLI%20tool%20for%20developers" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F16%2Fenterprise-kubernetes-development-with-odo-the-cli-tool-for-developers%2F&amp;#038;title=Enterprise%20Kubernetes%20development%20with%20odo%3A%20The%20CLI%20tool%20for%20developers" data-a2a-url="https://developers.redhat.com/blog/2020/06/16/enterprise-kubernetes-development-with-odo-the-cli-tool-for-developers/" data-a2a-title="Enterprise Kubernetes development with odo: The CLI tool for developers"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/06/16/enterprise-kubernetes-development-with-odo-the-cli-tool-for-developers/"&gt;Enterprise Kubernetes development with odo: The CLI tool for developers&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/gXynXpeiVwY" height="1" width="1" alt=""/&gt;</content><summary>Kubernetes conversations rarely center the developer’s perspective. As a result, doing our job in a k8s cluster often requires building complicated YAML resource files, writing custom shell scripts, and understanding the countless options that are available in kubectl and docker commands. On top of all of that, we have the learning curve of understanding Kubernetes terminology and using it the way...</summary><dc:creator>Jason Dudash</dc:creator><dc:date>2020-06-16T07:00:41Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/06/16/enterprise-kubernetes-development-with-odo-the-cli-tool-for-developers/</feedburner:origLink></entry><entry><title>Cloud-native development - A deployment blueprint</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/XvrVzLAP-BQ/cloud-native-development-a-deployment-blueprint.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Architecture Blueprints" scheme="searchisko:content:tags" /><category term="best practices" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-cloud_native_development_a_deployment_blueprint</id><updated>2020-06-16T12:23:31Z</updated><published>2020-06-16T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-7Y4CiiYTYj4/Xr50P1i2xAI/AAAAAAAAxIw/h2j8QBiLk20JYX-6dJkeJVOv_Ud9XvzdQCNcBGAsYHQ/s1600/cloud-native-development-ld.png" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="cloud-native development" border="1" data-original-height="900" data-original-width="1600" height="180" src="https://1.bp.blogspot.com/-7Y4CiiYTYj4/Xr50P1i2xAI/AAAAAAAAxIw/h2j8QBiLk20JYX-6dJkeJVOv_Ud9XvzdQCNcBGAsYHQ/s320/cloud-native-development-ld.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="font-size: 12.8px; text-align: center;"&gt;Part 5 - A deployment blueprint&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;The previous articles were &lt;a href="https://www.schabell.org/2020/05/cloud-native-development-a-blueprint.html" target="_blank"&gt;introducing the foundations&lt;/a&gt; of a blueprint&amp;nbsp;for cloud-native development, &lt;a href="https://www.schabell.org/2020/05/cloud-native-development-common-architectural-elements.html" target="_blank"&gt;exploring a logical diagram&lt;/a&gt;, and diving into the first use cases with&amp;nbsp;cloud-native &lt;a href="https://www.schabell.org/2020/06/cloud-native-development-on-local-containers.html" target="_blank"&gt;development on local&lt;/a&gt; and &lt;a href="https://www.schabell.org/2020/06/cloud-native-development-on-remote-containers.html" target="_blank"&gt;remote containers&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;In this article we're continuing on with example use cases within the architectural blueprint. Descriptions are provided to guide you with aligning the landscape your organization works with every day.&lt;br /&gt;&lt;br /&gt;These details should help you understand both what the elements contain and how they might align and how their functionalities are grouped. Let's look at the use case where developers are leveraging a remote container platform for their cloud-native development environments and see how that's mapping to a productive working architecture for deploying their solutions.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;We'll be exploring the use case detailing deployments from a developers local machines to development, testing, and finally production environments.&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Deployments&lt;/h3&gt;&lt;div&gt;This example starts with a cloud-native developer working on their local machines, shown here simplified as workstation tooling. Pushing their code solutions [1], using their container tooling to initiate a build in their continuous integration and development workflow (CI/CD).&lt;br /&gt;&lt;br /&gt;(*Note: all numbered steps found in the below image are presented in the text as [#], so step one with label one is shown as [1] in the deployment storyline as it appears.)&lt;br /&gt;&lt;br /&gt;In this blueprint, the tooling is focused on working with the OpenShift Container Platform so you see an&amp;nbsp;&lt;i&gt;OpenShift client&lt;/i&gt;&amp;nbsp;is used to trigger an initial build in our CI/CD OpenShift platform. This occurs when the developer is satisfied with their code. Triggering a build and testing request to the CI/CD platform shown here as being hosted on an OpenShift Container Platform cluster:&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;using git hooks, triggering a code push when it's committed to the local code repository&lt;/li&gt;&lt;li&gt;using Maven plugins, triggering a push to the development infrastructure when activated&lt;/li&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: right; text-align: right;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-JJMZkRC0oBQ/Xuhz6szkdbI/AAAAAAAAxPM/5U66DEQ4Www7Y5bjqpfwrINTkNhDkuS5gCNcBGAsYHQ/s1600/cloud-native-development-deployment-sd.png" imageanchor="1" style="clear: right; margin-bottom: 1em; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="cloud-native development" border="0" data-original-height="900" data-original-width="1600" height="180" src="https://1.bp.blogspot.com/-JJMZkRC0oBQ/Xuhz6szkdbI/AAAAAAAAxPM/5U66DEQ4Www7Y5bjqpfwrINTkNhDkuS5gCNcBGAsYHQ/s320/cloud-native-development-deployment-sd.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Deployment blueprint with numbered labels&lt;br /&gt;as workloads are built, tagged, and deployed.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;li&gt;using&amp;nbsp;&lt;i&gt;oc client&lt;/i&gt;&amp;nbsp;container tooling (featured in the diagram)&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;Development teams are free to use the method that best suits their own needs when pushing their code to&amp;nbsp; their CI/CD platform.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h3 style="text-align: left;"&gt;CI/CD infrastructure&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;The pushed code from the developers local working environment is picked up by the CI/CD platform, in this case most often was a Jenkins-based platform. Here we see the CI/CD platform uses a source-to-image workflow [2] to build the container image, test the image, and place it [3] in the transient image registry. At this point it has been tagged as &lt;i&gt;appImage:dev&lt;/i&gt;&amp;nbsp;and is pushed to the OpenShift cluster hosting the enterprise image registry managed with Quay [4].&lt;br /&gt;&lt;br /&gt;For this blueprint we've kept the enterprise image&amp;nbsp; registry storyline simple, just a single Quay instance, but in reality it's important to have stages for security testing, segregation of development and untested images, and to only allow fully certified images to be put into production. In our next article we'll expand on these more advanced deployments.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h3 style="text-align: left;"&gt;Development infrastructure&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;The development infrastructure image registry is loaded with a copy of the&amp;nbsp;&lt;i&gt;appImage:dev&lt;/i&gt;&amp;nbsp;tagged container image [5], which then deploys [6] the &lt;i&gt;application&lt;/i&gt;&amp;nbsp;and m&lt;i&gt;icroservices&lt;/i&gt;&amp;nbsp;associated with our workload. The development infrastructure is contained in it's own OpenShift cluster for further testing and validation of the developed application and microservices.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Once the development testing has been satisfied, the&amp;nbsp;&lt;i&gt;appImage&lt;/i&gt;&amp;nbsp;is tagged as&amp;nbsp;&lt;i&gt;appImage:test&lt;/i&gt;&amp;nbsp;and pushed from the CI/CD platform [7] to the Quay enterprise image registry.&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;h3 style="text-align: left;"&gt;Test infrastructure&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;All images tagged as &lt;i&gt;test&lt;/i&gt; are pushed from the Quay enterprise image registry to the test infrastructure [8] into the test OpenShift cluster image registry. The&amp;nbsp;&lt;i&gt;appImage:test&lt;/i&gt;&amp;nbsp;is used for deploying [9] the containers with the&amp;nbsp;&lt;i&gt;application&lt;/i&gt;&amp;nbsp;and&amp;nbsp;&lt;i&gt;microservices&lt;/i&gt;&amp;nbsp;as needed. At this point the testing cycle starts again with new test infrastructure data and requirements on the road to a production deployment.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Once the testing has been satisfied, the &lt;i&gt;appImage&lt;/i&gt;&amp;nbsp;is tagged as &lt;i&gt;appImage:prod&lt;/i&gt;&amp;nbsp;and pushed from the CI/CD platform [10] to the Quay enterprise image registry.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;h3 style="text-align: left;"&gt;Production infrastructure&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;All images tagged as &lt;i&gt;prod&lt;/i&gt; are pushed from the Quay enterprise image registry to the production infrastructure [11] into the production OpenShift cluster image registry. The&amp;nbsp;&lt;i&gt;appImage:prod&lt;/i&gt;&amp;nbsp;is used for deploying [12] the containers with the&amp;nbsp;&lt;i&gt;application&lt;/i&gt;&amp;nbsp;and&amp;nbsp;&lt;i&gt;microservices&lt;/i&gt;&amp;nbsp;as needed. At this point the workload is live for use in the production environment.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This use case example features the deployment architecture for your workloads using cloud-native development in your organization. It's featuring a blueprint for mapping your cloud-native development process for deploying the developer solution through to your production infrastructure.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;h3&gt;Exploring the diagrams&lt;/h3&gt;&lt;div&gt;As mentioned in the introduction to this series, we've pulled together an&amp;nbsp;&lt;a href="https://gitlab.com/redhatdemocentral/portfolio-architecture-examples" target="_blank"&gt;examples repository&lt;/a&gt;&amp;nbsp;for all our architecture blueprint diagrams. The&amp;nbsp;&lt;a href="https://gitlab.com/redhatdemocentral/portfolio-architecture-examples" target="_blank"&gt;Portfolio Architecture Examples&lt;/a&gt;&amp;nbsp;repository makes it possible to collect and share individual images from each diagram element as well as the entire project as a whole.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://1.bp.blogspot.com/-dRBXuaZt5t0/XsuO-04T-9I/AAAAAAAAxK4/lXES7oKvrwEJjgtKcvJyJqwK3v0Ey65lgCNcBGAsYHQ/s1600/Screenshot%2B2020-05-25%2Bat%2B11.24.53.png" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="cloud-native development" border="1" data-original-height="303" data-original-width="1219" height="98" src="https://1.bp.blogspot.com/-dRBXuaZt5t0/XsuO-04T-9I/AAAAAAAAxK4/lXES7oKvrwEJjgtKcvJyJqwK3v0Ey65lgCNcBGAsYHQ/s400/Screenshot%2B2020-05-25%2Bat%2B11.24.53.png" title="" width="400" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;To access the diagram covered in this article, you scroll down to the file listings on the main page, you can locate a schematic diagram as shown in the figure here.&lt;br /&gt;&lt;br /&gt;This is the collection for the schematic diagrams associated with cloud-native development:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;in this case it's a single image you can click to view&lt;/li&gt;&lt;li&gt;a project file you can download to your local machine using the&amp;nbsp;&lt;i&gt;Download Diagram&lt;/i&gt;&amp;nbsp;link&lt;/li&gt;&lt;li&gt;a&amp;nbsp;&lt;i&gt;Load Diagram&lt;/i&gt;&amp;nbsp;link that you can click to automatically open the project diagrams in the diagram tooling used in this blueprint&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;Give it a try and feel free to explore the collection of logical, schematic, detailed, solution, and community diagrams. This should allow you to get started much quicker than from scratch if you can kick-start a project with existing diagrams.&lt;br /&gt;&lt;br /&gt;Should you design your own diagrams, please contribute the project file (ending in .drawio) by raising an issue with the file attached. We'd love to continue collecting these projects for others to use.&lt;br /&gt;&lt;br /&gt;Finally, there is a free online&amp;nbsp;&lt;a href="https://redhatdemocentral.gitlab.io/portfolio-architecture-workshops" target="_blank"&gt;beginners guide workshop&lt;/a&gt;&amp;nbsp;available focused on using the diagram tooling, please explore to learn tips and tricks from the experts.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3&gt;What's next&lt;/h3&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;An overview of the series on the cloud-native development portfolio architecture blueprint can be found here:&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/05/cloud-native-development-a-blueprint.html" target="_blank"&gt;A blueprint&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/05/cloud-native-development-common-architectural-elements.html" target="_blank"&gt;Common architectural elements&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/06/cloud-native-development-on-local-containers.html" target="_blank"&gt;Cloud-native development on local containers&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/06/cloud-native-development-on-remote-containers.html" target="_blank"&gt;Cloud-native development on remote containers&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/06/cloud-native-development-a-deployment-blueprint.html" target="_blank"&gt;A deployment blueprint&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Advanced deployment blueprint&lt;/li&gt;&lt;/ol&gt;Catch up on any articles you missed by following one of the links above. Next in this series, taking a look at advanced cloud-native deployments.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=wP0JnuQHsBU:RXPsXVKnFxo:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=wP0JnuQHsBU:RXPsXVKnFxo:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=wP0JnuQHsBU:RXPsXVKnFxo:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=wP0JnuQHsBU:RXPsXVKnFxo:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=wP0JnuQHsBU:RXPsXVKnFxo:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=wP0JnuQHsBU:RXPsXVKnFxo:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=wP0JnuQHsBU:RXPsXVKnFxo:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=wP0JnuQHsBU:RXPsXVKnFxo:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=wP0JnuQHsBU:RXPsXVKnFxo:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=wP0JnuQHsBU:RXPsXVKnFxo:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=wP0JnuQHsBU:RXPsXVKnFxo:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/wP0JnuQHsBU" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/XvrVzLAP-BQ" height="1" width="1" alt=""/&gt;</content><summary>Part 5 - A deployment blueprintThe previous articles were introducing the foundations of a blueprint for cloud-native development, exploring a logical diagram, and diving into the first use cases with cloud-native development on local and remote containers. In this article we're continuing on with example use cases within the architectural blueprint. Descriptions are provided to guide you with ali...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2020-06-16T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/wP0JnuQHsBU/cloud-native-development-a-deployment-blueprint.html</feedburner:origLink></entry><entry><title>Infinispan 11.0.0.Final</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/HIk81kizi4A/" /><category term="feed_group_name_infinispan" scheme="searchisko:content:tags" /><category term="feed_name_infinispan" scheme="searchisko:content:tags" /><category term="release" scheme="searchisko:content:tags" /><author><name>Tristan Tarrant</name></author><id>searchisko:content:id:jbossorg_blog-infinispan_11_0_0_final</id><updated>2020-06-16T13:09:10Z</updated><published>2020-06-15T12:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Dear Infinispan community,&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;We’re proud to announce the release of Infinispan 11. In the tradition of assigning beer codenames to our releases, we decided that "Corona Extra" would be a significant representation of the period during which most of the development has happened. We hope that you, your families and friends have not been impacted by the pandemic.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_but_didnt_you_release_10_x_not_long_ago"&gt;&lt;a class="anchor" href="#_but_didnt_you_release_10_x_not_long_ago" /&gt;But didn’t you release 10.x not long ago ?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Indeed, but version numbers are just that: numbers. We are still continuing our near-quarterly releases, but, from now on, these will be identified by major version numbers.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_so_whats_new_in_infinispan_11"&gt;&lt;a class="anchor" href="#_so_whats_new_in_infinispan_11" /&gt;So, what’s new in Infinispan 11 ?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;As usual we added new features, improved existing ones and prepared the groundwork for upcoming features.&lt;/p&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="_conflict_detection_and_resolution_for_asynchronous_cross_site_replication"&gt;&lt;a class="anchor" href="#_conflict_detection_and_resolution_for_asynchronous_cross_site_replication" /&gt;Conflict detection and resolution for Asynchronous Cross-Site Replication&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Cross-site replication is one of our most used features, as it enables a number of very useful use-cases such as geographical load distribution, zero-downtime disaster recovery and follow-the-sun data centers.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;In this release we completely overhauled the way we implement asynchronous cross-site replication by introducing conflict resolution, based on vector clocks, as well as multiple site masters to increase throughput and reliability. This means that you can have multiple active sites safely replicating data between each other.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="_server_security_overhaul"&gt;&lt;a class="anchor" href="#_server_security_overhaul" /&gt;Server security overhaul&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Infinispan Server’s security, while very powerful, was also tricky to set up because of the configuration complexity. Since we wanted to make the &lt;a href="//infinispan.org/blog/2020/06/04/server-secure-by-default/"&gt;server secure by default&lt;/a&gt;, we put a lot of work in simplifying the configuration and removing all of the boilerplate. Additionally, if you are securing the server with &lt;a href="https://keycloak.org"&gt;Keycloak&lt;/a&gt;, accessing the console will correctly obtain credentials through the realm login page.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="_non_blocking_internals"&gt;&lt;a class="anchor" href="#_non_blocking_internals" /&gt;Non-blocking internals&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Our quest to make better use of the available hardware resources in all deployment models (bare-metal, containerized, virtualized) continues as we’ve now consolidated a lot of thread-pools into just two: non-blocking and blocking. Most of the code now makes use of the non-blocking pool. Paths which may block, such as certain persistent stores, use the blocking pool so that they don’t hold up work that may be processed without blocking. This release also includes a new non-blocking Store SPI, so that you can take advantage of stores with real non-blocking I/O.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="_clustering"&gt;&lt;a class="anchor" href="#_clustering" /&gt;Clustering&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;As Infinispan is participating in &lt;a href="https://cloudbutton.eu/"&gt;CloudButton&lt;/a&gt;, a Serverless Data Analytics Platform which is part of the &lt;a href="https://ec.europa.eu/programmes/horizon2020/"&gt;European Union’s Horizon 2020 research and innovation programme&lt;/a&gt;, we have introduced a new optional feature which allows scaling by adding new nodes to a cluster without state-transfer. This means that you can add capacity with zero-impact to your operations. Obviously this comes at the cost of reduced resilience in case of failures, but, for scenarios where high availability is not required, this gives you a highly scalable in-memory storage solution.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;If high availability is your thing, the rebalancing algorithm which decides how segments (our subdivision of the data space) are mapped to nodes has been overhauled to be much more accurate and fairer.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="_queryindexing"&gt;&lt;a class="anchor" href="#_queryindexing" /&gt;Query/Indexing&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Querying and indexing will be the major focus in Infinispan 12 (with the long awaited upgrade to &lt;a href="https://hibernate.org/search/"&gt;Hibernate Search 6&lt;/a&gt; and &lt;a href="https://lucene.apache.org/"&gt;Lucene 8&lt;/a&gt;). In preparation for that, &lt;strong&gt;a lot&lt;/strong&gt; of work has gone into deprecations, usability, clean ups and documentation.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="_hot_rod_client_improvements"&gt;&lt;a class="anchor" href="#_hot_rod_client_improvements" /&gt;Hot Rod Client improvements&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Many usability changes have been added to our Java Hot Rod client:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;a Hot Rod URI as a compact way to configure a connection&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;automatic creation of caches on demand using supplied configurations/templates with support for wildcards&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;improved iteration of entries by concurrently splitting work across segments/nodes&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="_other_server_changes"&gt;&lt;a class="anchor" href="#_other_server_changes" /&gt;Other Server changes&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;If you are using the JDBC cache store to persist your cache entries to a database, Infinispan Server now restores the ability to create shared datasources which was lost when we abandoned the WildFly base.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="_cli"&gt;&lt;a class="anchor" href="#_cli" /&gt;CLI&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The CLI received a number of new features such as logging manipulation, obtaining sever reports and user management, superseding the &lt;code&gt;user-tool&lt;/code&gt; script.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;a class="image" href="//infinispan.org/blog/img/ispn110cli.png"&gt;&lt;img src="//infinispan.org/blog/thumb/ispn101welcome.png" alt="CLI" /&gt; &lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="_console"&gt;&lt;a class="anchor" href="#_console" /&gt;Console&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Our console overhaul, which started in 10, continues with lots of new features, integrations and polishing. Highlights are:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;entry creation dialog box&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;querying&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;KeyCloak integration&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;a class="image" href="//infinispan.org/blog/img/ispn110console.png"&gt;&lt;img src="//infinispan.org/blog/thumb/ispn110console.png" alt="onsole" /&gt; &lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="_clouds_containers_and_operators"&gt;&lt;a class="anchor" href="#_clouds_containers_and_operators" /&gt;Clouds, containers and operators&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Our Infinispan Server image is now based on &lt;code&gt;ubi-minimal:8.2&lt;/code&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;And thanks to our friends over at &lt;a href="https://quarkus.io"&gt;Quarkus&lt;/a&gt;, Infinispan Server is now also available as a native image built using &lt;a href="https://graalvm.org"&gt;GraalVM&lt;/a&gt;. This image is available on Quay.io and Docker Hub.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The Kubernetes Operator adds a new Cache Custom Resource and the ability to expose services via Ingress and Routes.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="_documentation"&gt;&lt;a class="anchor" href="#_documentation" /&gt;Documentation&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Documentation has also received a lot of love in all areas:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Added procedural content for rolling upgrades, Cache CR with the Operator, server patching, misc CLI commands, using RemoteCacheConfigurationBuilder.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Procedural content for different upgrade and migration tasks included in Upgrade Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Operator and Spring Boot Starter guides now provide stable and development versions from the index page.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Updated index.html and throughout documentation to improve high-level context and aid retrievability.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Getting Started content updated and streamlined.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Applied several modifications, additions, and removals to documentation via community feedback.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_whats_next"&gt;&lt;a class="anchor" href="#_whats_next" /&gt;What’s next ?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;As briefly mentioned above, Infinispan 12 will be our next release, scheduled for this autumn. We will be working on query/index improvements, backup/restore capabilities as well as the usual load of improvements, clean-ups across the board. We will keep you posted with development release and blogs about upcoming highlights. If you’d like to contribute, just get in touch.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_get_it_use_it_ask_us"&gt;&lt;a class="anchor" href="#_get_it_use_it_ask_us" /&gt;Get it, Use it, Ask us!&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Please &lt;a href="https://infinispan.org/download/"&gt;download&lt;/a&gt;, &lt;a href="https://issues.jboss.org/projects/ISPN"&gt;report bugs&lt;/a&gt;, &lt;a href="https://infinispan.zulipchat.com/"&gt;chat with us&lt;/a&gt;, ask questions on &lt;a href="https://stackoverflow.com/questions/tagged/?tagnames=infinispan&amp;amp;sort=newest"&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/HIk81kizi4A" height="1" width="1" alt=""/&gt;</content><summary>Dear Infinispan community, We’re proud to announce the release of Infinispan 11. In the tradition of assigning beer codenames to our releases, we decided that "Corona Extra" would be a significant representation of the period during which most of the development has happened. We hope that you, your families and friends have not been impacted by the pandemic. But didn’t you release 10.x not long ag...</summary><dc:creator>Tristan Tarrant</dc:creator><dc:date>2020-06-15T12:00:00Z</dc:date><feedburner:origLink>http://infinispan.org/blog/2020/06/15/infinispan-11/</feedburner:origLink></entry><entry><title>Jakarta EE: Multitenancy with JPA on WildFly, Part 1</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/7zZq2y1lyIQ/" /><category term="Containers" scheme="searchisko:content:tags" /><category term="devops" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Hibernate JPA" scheme="searchisko:content:tags" /><category term="jakarta ee" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="multi-tenancy" scheme="searchisko:content:tags" /><category term="wildfly" scheme="searchisko:content:tags" /><author><name>rhsilva</name></author><id>searchisko:content:id:jbossorg_blog-jakarta_ee_multitenancy_with_jpa_on_wildfly_part_1</id><updated>2020-06-15T07:00:45Z</updated><published>2020-06-15T07:00:45Z</published><content type="html">&lt;p&gt;In this two-part series, I demonstrate two approaches to multitenancy with the &lt;a target="_blank" rel="nofollow" href="https://projects.eclipse.org/projects/ee4j.jpa"&gt;Jakarta Persistence API (JPA)&lt;/a&gt; running on &lt;a target="_blank" rel="nofollow" href="https://wildfly.org"&gt;WildFly&lt;/a&gt;. In the first half of this series, you will learn how to implement multitenancy using a database. In the second half, I will introduce you to multitenancy using a schema. I based both examples on JPA and &lt;a target="_blank" rel="nofollow" href="http://hibernate.org"&gt;Hibernate&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Because I have focused on implementation examples, I won&amp;#8217;t go deeply into the details of multitenancy, though I will start with a brief overview. Note, too, that I assume you are familiar with Java persistence using JPA and Hibernate.&lt;/p&gt; &lt;h2&gt;Multitenancy architecture&lt;/h2&gt; &lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://docs.jboss.org/hibernate/orm/4.1/devguide/en-US/html/ch16.html"&gt;Multitenancy&lt;/a&gt; is an architecture that permits a single application to serve multiple tenants, also known as clients. Although tenants in a multitenancy architecture access the same application, they are securely isolated from each other. Furthermore, each tenant only has access to its own resources. Multitenancy is a common architectural approach for software-as-a-service (SaaS) and cloud computing applications. In general, clients (or tenants) accessing a SaaS are accessing the same application, but each one is isolated from the others and has its own resources.&lt;/p&gt; &lt;p&gt;A multitenant architecture must isolate the data available to each tenant. If there is a problem with one tenant&amp;#8217;s data set, it won&amp;#8217;t impact the other tenants. In a relational database, we use a database or a schema to isolate each tenant&amp;#8217;s data. One way to separate data is to give each tenant access to its own database or schema. Another option, which is available if you are using a relational database with JPA and Hibernate, is to partition a single database for multiple tenants. In this article, I focus on the standalone database and schema options. I won&amp;#8217;t demonstrate how to set up a partition.&lt;/p&gt; &lt;p&gt;In a server-based application like WildFly, multitenancy is different from the conventional approach. In this case, the server application works directly with the data source by initiating a connection and preparing the database to be used. The client application does not spend time opening the connection, which improves performance. On the other hand, using Enterprise JavaBeans (EJBs) for container-managed transactions can lead to problems. As an example, the server-based application could do something to generate an error to commit or roll the application back.&lt;/p&gt; &lt;h2&gt;Implementation code&lt;/h2&gt; &lt;p&gt;Two interfaces are crucial to implementing multitenancy in JPA and Hibernate:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;MultiTenantConnectionProvider&lt;/strong&gt; is responsible for connecting tenants to their respective databases and services. We will use this interface and a tenant identifier to switch between databases for different tenants.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;CurrentTenantIdentifierResolver&lt;/strong&gt; is responsible for identifying the tenant. We will use this interface to define what is considered a tenant (more about this later). We will also use this interface to provide the correct tenant identifier to &lt;code&gt;MultiTenantConnectionProvider&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;In JPA, we configure these interfaces using the &lt;code&gt;persistence.xml&lt;/code&gt; file. In the next sections, I&amp;#8217;ll show you how to use these two interfaces to create the first three classes we need for our multitenancy architecture: &lt;code&gt;DatabaseMultiTenantProvider&lt;/code&gt;, &lt;code&gt;MultiTenantResolver&lt;/code&gt;, and &lt;code&gt;DatabaseTenantResolver&lt;/code&gt;.&lt;/p&gt; &lt;h3&gt;DatabaseMultiTenantProvider&lt;/h3&gt; &lt;p&gt;&lt;code&gt;DatabaseMultiTenantProvider&lt;/code&gt; is an implementation of the &lt;code&gt;MultiTenantConnectionProvider&lt;/code&gt; interface. This class contains logic to switch to the database that matches the given tenant identifier. In WildFly, this means switching to different &lt;em&gt;data sources&lt;/em&gt;. The &lt;code&gt;DatabaseMultiTenantProvider&lt;/code&gt; class also implements the &lt;code&gt;ServiceRegistryAwareService&lt;/code&gt;, which allows us to inject a service during the configuration phase.&lt;/p&gt; &lt;p&gt;Here&amp;#8217;s the code for the &lt;code&gt;DatabaseMultiTenantProvider&lt;/code&gt; class:&lt;/p&gt; &lt;pre&gt;public class DatabaseMultiTenantProvider implements MultiTenantConnectionProvider, ServiceRegistryAwareService{ private static final long serialVersionUID = 1L; private static final String TENANT_SUPPORTED = "DATABASE"; private DataSource dataSource; private String typeTenancy ; @Override public boolean supportsAggressiveRelease() { return false; } @Override public void injectServices(ServiceRegistryImplementor serviceRegistry) { typeTenancy = (String) ((ConfigurationService)serviceRegistry .getService(ConfigurationService.class)) .getSettings().get("hibernate.multiTenancy"); dataSource = (DataSource) ((ConfigurationService)serviceRegistry .getService(ConfigurationService.class)) .getSettings().get("hibernate.connection.datasource"); } @SuppressWarnings("rawtypes") @Override public boolean isUnwrappableAs(Class clazz) { return false; } @Override public &amp;#60;T&amp;#62; T unwrap(Class&amp;#60;T&amp;#62; clazz) { return null; } @Override public Connection getAnyConnection() throws SQLException { final Connection connection = dataSource.getConnection(); return connection; } @Override public Connection getConnection(String tenantIdentifier) throws SQLException { final Context init; //Just use the multi-tenancy if the hibernate.multiTenancy == DATABASE &lt;strong&gt;if(TENANT_SUPPORTED.equals(typeTenancy)) {&lt;/strong&gt; try { init = new InitialContext(); &lt;strong&gt; dataSource = (DataSource) init.lookup("java:/jdbc/" + tenantIdentifier);&lt;/strong&gt; } catch (NamingException e) { throw new HibernateException("Error trying to get datasource ['java:/jdbc/" + tenantIdentifier + "']", e); } } return dataSource.getConnection(); } @Override public void releaseAnyConnection(Connection connection) throws SQLException { connection.close(); } @Override public void releaseConnection(String tenantIdentifier, Connection connection) throws SQLException { releaseAnyConnection(connection); } } &lt;/pre&gt; &lt;p&gt;As you can see, we call the &lt;code&gt;injectServices&lt;/code&gt; method to populate the &lt;code&gt;datasource&lt;/code&gt; and &lt;code&gt;typeTenancy&lt;/code&gt; attributes. We use the &lt;code&gt;datasource&lt;/code&gt; attribute to get a connection from the data source, and we use the &lt;code&gt;typeTenancy&lt;/code&gt; attribute to find out if the class supports the &lt;code&gt;multiTenancy&lt;/code&gt; type. We call the &lt;code&gt;getConnection&lt;/code&gt; method to get a data source connection. This method uses the tenant identifier to locate and switch to the correct data source.&lt;/p&gt; &lt;h3&gt;MultiTenantResolver&lt;/h3&gt; &lt;p&gt;&lt;code&gt;MultiTenantResolver&lt;/code&gt; is an abstract class that implements the &lt;code&gt;CurrentTenantIdentifierResolver&lt;/code&gt; interface. This class aims to provide a &lt;code&gt;setTenantIdentifier&lt;/code&gt; method to all &lt;code&gt;CurrentTenantIdentifierResolver&lt;/code&gt; implementations:&lt;/p&gt; &lt;pre&gt;public abstract class MultiTenantResolver implements CurrentTenantIdentifierResolver { &lt;strong&gt;protected String tenantIdentifier; public void setTenantIdentifier(String tenantIdentifier) { this.tenantIdentifier = tenantIdentifier; } &lt;/strong&gt;} &lt;/pre&gt; &lt;p&gt;This abstract class is simple. We only use it to provide the &lt;code&gt;setTenantIdentifier&lt;/code&gt; method.&lt;/p&gt; &lt;h3&gt;DatabaseTenantResolver&lt;/h3&gt; &lt;p&gt;&lt;code&gt;DatabaseTenantResolver&lt;/code&gt; also implements the &lt;code&gt;CurrentTenantIdentifierResolver&lt;/code&gt; interface. This class is the concrete class of &lt;code&gt;MultiTenantResolver&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;public class DatabaseTenantResolver extends MuiltiTenantResolver { private Map&amp;#60;String, String&amp;#62; regionDatasourceMap; public DatabaseTenantResolver(){ &lt;strong&gt;regionDatasourceMap = new HashMap();&lt;/strong&gt; &lt;strong&gt; regionDatasourceMap.put("default", "MyDataSource");&lt;/strong&gt; &lt;strong&gt; regionDatasourceMap.put("america", "AmericaDB");&lt;/strong&gt; &lt;strong&gt; regionDatasourceMap.put("europa", "EuropaDB");&lt;/strong&gt; &lt;strong&gt; regionDatasourceMap.put("asia", "AsiaDB");&lt;/strong&gt; } @Override public String resolveCurrentTenantIdentifier() { &lt;strong&gt;if(this.tenantIdentifier != null&lt;/strong&gt; &lt;strong&gt; &amp;#38;&amp;#38; regionDatasourceMap.containsKey(this.tenantIdentifier)){&lt;/strong&gt; &lt;strong&gt; return regionDatasourceMap.get(this.tenantIdentifier);&lt;/strong&gt; &lt;strong&gt; }&lt;/strong&gt; &lt;strong&gt; return regionDatasourceMap.get("default");&lt;/strong&gt; } @Override public boolean validateExistingCurrentSessions() { return false; } }&lt;/pre&gt; &lt;p&gt;Notice that &lt;code&gt;DatabaseTenantResolver&lt;/code&gt; uses a &lt;code&gt;Map&lt;/code&gt; to define the correct data source for a given tenant. The tenant, in this case, is a region. Note, too, that this example assumes we have the data sources &lt;code&gt;java:/jdbc/MyDataSource&lt;/code&gt;, &lt;code&gt;java:/jdbc/AmericaDB&lt;/code&gt;, &lt;code&gt;java:/jdbc/EuropaDB&lt;/code&gt;, and &lt;code&gt;java:/jdbc/AsiaDB&lt;/code&gt; configured in WildFly.&lt;/p&gt; &lt;h2&gt;Configure and define the tenant&lt;/h2&gt; &lt;p&gt;Now we need to use the &lt;code&gt;persistence.xml&lt;/code&gt; file to configure the tenant:&lt;/p&gt; &lt;pre&gt;&amp;#60;persistence&amp;#62; &amp;#60;persistence-unit name="jakartaee8"&amp;#62; &amp;#60;jta-data-source&amp;#62;jdbc/MyDataSource&amp;#60;/jta-data-source&amp;#62; &amp;#60;properties&amp;#62; &amp;#60;property name="javax.persistence.schema-generation.database.action" value="none" /&amp;#62; &amp;#60;property name="hibernate.dialect" value="org.hibernate.dialect.PostgresPlusDialect"/&amp;#62; &lt;strong&gt;&amp;#60;property name="hibernate.multiTenancy" value="DATABASE"/&amp;#62;&lt;/strong&gt; &lt;strong&gt;&amp;#60;property name="hibernate.tenant_identifier_resolver" value="net.rhuanrocha.dao.multitenancy.DatabaseTenantResolver"/&amp;#62;&lt;/strong&gt; &lt;strong&gt; &amp;#60;property name="hibernate.multi_tenant_connection_provider" value="net.rhuanrocha.dao.multitenancy.DatabaseMultiTenantProvider"/&amp;#62;&lt;/strong&gt; &amp;#60;/properties&amp;#62; &amp;#60;/persistence-unit&amp;#62; &amp;#60;/persistence&amp;#62; &lt;/pre&gt; &lt;p&gt;Next, we define the tenant in the &lt;code&gt;EntityManagerFactory&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;@PersistenceUnit protected EntityManagerFactory emf; protected EntityManager getEntityManager(String multitenancyIdentifier){ final MuiltiTenantResolver tenantResolver = (&lt;strong&gt;MuiltiTenantResolver&lt;/strong&gt;) ((SessionFactoryImplementor) emf).getCurrentTenantIdentifierResolver(); &lt;strong&gt; tenantResolver.setTenantIdentifier(multitenancyIdentifier);&lt;/strong&gt; return emf.createEntityManager(); } &lt;/pre&gt; &lt;p&gt;Note that we call the &lt;code&gt;setTenantIdentifier&lt;/code&gt; before creating a new instance of &lt;code&gt;EntityManager&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;I have presented a simple example of multitenancy in a database using JPA with Hibernate and WildFly. There are many ways to use a database for multitenancy. My main point has been to show you how to implement the &lt;code&gt;CurrentTenantIdentifierResolver&lt;/code&gt; and &lt;code&gt;MultiTenantConnectionProvider&lt;/code&gt; interfaces. I&amp;#8217;ve shown you how to use JPA&amp;#8217;s &lt;code&gt;persistence.xml&lt;/code&gt; file to configure the required classes based on these interfaces.&lt;/p&gt; &lt;p&gt;Keep in mind that for this example, I have assumed that WildFly manages the data source and connection pool and that EJB handles the container-managed transactions. In the second half of this series, I will provide a similar introduction to multitenancy, but using a schema rather than a database. If you want to go deeper with this example, you can &lt;a target="_blank" rel="nofollow" href="https://github.com/rhuan080/multitenancyJpaJakartaEE"&gt;find the complete application code and further instructions&lt;/a&gt; on my GitHub repository.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F15%2Fjakarta-ee-multitenancy-with-jpa-on-wildfly-part-1%2F&amp;#38;linkname=Jakarta%20EE%3A%20Multitenancy%20with%20JPA%20on%20WildFly%2C%20Part%201" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F15%2Fjakarta-ee-multitenancy-with-jpa-on-wildfly-part-1%2F&amp;#38;linkname=Jakarta%20EE%3A%20Multitenancy%20with%20JPA%20on%20WildFly%2C%20Part%201" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F15%2Fjakarta-ee-multitenancy-with-jpa-on-wildfly-part-1%2F&amp;#38;linkname=Jakarta%20EE%3A%20Multitenancy%20with%20JPA%20on%20WildFly%2C%20Part%201" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F15%2Fjakarta-ee-multitenancy-with-jpa-on-wildfly-part-1%2F&amp;#38;linkname=Jakarta%20EE%3A%20Multitenancy%20with%20JPA%20on%20WildFly%2C%20Part%201" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F15%2Fjakarta-ee-multitenancy-with-jpa-on-wildfly-part-1%2F&amp;#38;linkname=Jakarta%20EE%3A%20Multitenancy%20with%20JPA%20on%20WildFly%2C%20Part%201" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F15%2Fjakarta-ee-multitenancy-with-jpa-on-wildfly-part-1%2F&amp;#38;linkname=Jakarta%20EE%3A%20Multitenancy%20with%20JPA%20on%20WildFly%2C%20Part%201" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F15%2Fjakarta-ee-multitenancy-with-jpa-on-wildfly-part-1%2F&amp;#38;linkname=Jakarta%20EE%3A%20Multitenancy%20with%20JPA%20on%20WildFly%2C%20Part%201" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F15%2Fjakarta-ee-multitenancy-with-jpa-on-wildfly-part-1%2F&amp;#038;title=Jakarta%20EE%3A%20Multitenancy%20with%20JPA%20on%20WildFly%2C%20Part%201" data-a2a-url="https://developers.redhat.com/blog/2020/06/15/jakarta-ee-multitenancy-with-jpa-on-wildfly-part-1/" data-a2a-title="Jakarta EE: Multitenancy with JPA on WildFly, Part 1"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/06/15/jakarta-ee-multitenancy-with-jpa-on-wildfly-part-1/"&gt;Jakarta EE: Multitenancy with JPA on WildFly, Part 1&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/7zZq2y1lyIQ" height="1" width="1" alt=""/&gt;</content><summary>In this two-part series, I demonstrate two approaches to multitenancy with the Jakarta Persistence API (JPA) running on WildFly. In the first half of this series, you will learn how to implement multitenancy using a database. In the second half, I will introduce you to multitenancy using a schema. I based both examples on JPA and Hibernate. Because I have focused on implementation examples, I won’...</summary><dc:creator>rhsilva</dc:creator><dc:date>2020-06-15T07:00:45Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/06/15/jakarta-ee-multitenancy-with-jpa-on-wildfly-part-1/</feedburner:origLink></entry><entry><title>Tracking COVID-19 using Quarkus, AMQ Streams, and Camel K on OpenShift</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/QkUhNGsv0ds/" /><category term="Apache Kafka" scheme="searchisko:content:tags" /><category term="COVID-19" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="kubernetes-native" scheme="searchisko:content:tags" /><category term="mongodb" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><category term="Stream Processing" scheme="searchisko:content:tags" /><author><name>gmccarth</name></author><id>searchisko:content:id:jbossorg_blog-tracking_covid_19_using_quarkus_amq_streams_and_camel_k_on_openshift</id><updated>2020-06-15T07:00:04Z</updated><published>2020-06-15T07:00:04Z</published><content type="html">&lt;p&gt;In just a matter of weeks, the world that we knew changed forever. The COVID-19 pandemic came swiftly and caused massive disruption to our healthcare systems and local businesses, throwing the world&amp;#8217;s economies into chaos. The coronavirus quickly became a crisis that affected everyone. As researchers and scientists rushed to make sense of it, and find ways to eliminate or slow the rate of infection, countries started gathering statistics such as the number of confirmed cases, reported deaths, and so on. Johns Hopkins University researchers have since aggregated the &lt;a target="_blank" rel="nofollow" href="https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_daily_reports"&gt;statistics from many countries&lt;/a&gt; and made them available.&lt;/p&gt; &lt;p&gt;In this article, we demonstrate how to build a website that shows a series of COVID-19 graphs. These graphs reflect the accumulated number of cases and deaths over a given time period for each country. We use the &lt;a href="https://developers.redhat.com/products/quarkus/overview"&gt;Red Hat build of Quarkus, &lt;/a&gt;&lt;a target="_blank" rel="nofollow" href="https://camel.apache.org/camel-k/latest/index.html#"&gt;Apache Camel K&lt;/a&gt;, and &lt;a href="https://developers.redhat.com/products/amq/overview"&gt;Red Hat AMQ Streams&lt;/a&gt; to get the Johns Hopkins University data and populate a MongoDB database with it. The deployment is built on the &lt;a href="https://developers.redhat.com/products/openshift/getting-started"&gt;Red Hat OpenShift Container Platform (OCP)&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;span id="more-729337"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;The two applications developed for this demo would work for many other scenarios, such as reporting on corporate sales numbers, reporting on data from Internet-of-Things (IoT) connected devices, or keeping track of expenses or inventory. Wherever there is a repository with useful data, you could make minor code modifications and use these applications to collect, transform, and present the data to its users in a more meaningful way.&lt;/p&gt; &lt;h2&gt;Technologies we&amp;#8217;ll use&lt;/h2&gt; &lt;p&gt;Our focus in this article is the next-generation &lt;a href="https://developers.redhat.com/blog/2020/04/08/why-kubernetes-native-instead-of-cloud-native/"&gt;Kubernetes-native&lt;/a&gt; &lt;a target="_blank" rel="nofollow" href="http://developers.redhat.com/blog/2020/04/24/ramp-up-on-quarkus-a-kubernetes-native-java-framework/"&gt;Java framework&lt;/a&gt;, &lt;a href="https://developers.redhat.com/products/quarkus/overview"&gt;Quarkus&lt;/a&gt;. We also leverage existing frameworks such as Apache Camel K and Kafka (AMQ Streams) to reduce the amount of code that we need to write.&lt;/p&gt; &lt;h3&gt;What is Quarkus?&lt;/h3&gt; &lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://quarkus.io/"&gt;Quarkus&lt;/a&gt; is a Kubernetes-native Java framework crafted from best-of-breed Java libraries and standards. We also sometimes refer to Quarkus as &lt;i&gt;supersonic, subatomic Java&lt;/i&gt;, and for a good reason: Quarkus offers fast boot times and low RSS memory (not just heap size) in container-orchestration platforms like &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt;. Quarkus lets developers create Java applications that have a similar footprint to &lt;a href="https://developers.redhat.com/blog/category/node-js/"&gt;Node.js&lt;/a&gt;, or smaller.&lt;/p&gt; &lt;p&gt;For this demonstration, we chose to run our Quarkus apps on OCP. Running on OpenShift Container Platform means that our demo applications can run anywhere that OpenShift runs, which includes bare metal, Amazon Web Services (AWS), Azure, Google Cloud, IBM Cloud, vSphere, and more.&lt;/p&gt; &lt;h3&gt;What is Red Hat OpenShift?&lt;/h3&gt; &lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://www.openshift.com/products/container-platform"&gt;Red Hat OpenShift&lt;/a&gt; offers a consistent hybrid-cloud foundation for building and scaling containerized applications. OpenShift provides an enterprise-grade, container-based platform with no vendor lock-in. Red Hat was one of the first companies to work with Google on Kubernetes, even prior to launch, and has become the second leading contributor to the Kubernetes upstream project. Using OpenShift simplifies application deployment because we can easily create resources (such as the MongoDB database we&amp;#8217;re using for this demonstration) by entering just a couple of commands in the terminal. OpenShift also provides a common development platform no matter what infrastructure we use to host the application.&lt;/p&gt; &lt;h3&gt;What is Red Hat AMQ Streams?&lt;/h3&gt; &lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/products/red-hat-amq-streams"&gt;AMQ Streams&lt;/a&gt; is an enterprise-grade Apache Kafka (&lt;a href="https://developers.redhat.com/blog/category/stream-processing/"&gt;event streaming&lt;/a&gt;) solution, which enables systems to exchange data at high throughput and low latency. Using queues is a great way to ensure that our applications are loosely coupled. Kafka is an excellent product, providing a highly scalable, fault-tolerant message queue that is capable of handling large volumes of data with relative ease.&lt;/p&gt; &lt;h3&gt;What is Apache Camel K?&lt;/h3&gt; &lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://camel.apache.org/camel-k/latest/"&gt;Apache Camel K&lt;/a&gt; is a lightweight cloud-integration platform that runs natively on Kubernetes and supports automated cloud configurations. Based on the famous Apache Camel, Camel K is designed and optimized for serverless and microservices architectures. Camel offers hundreds of connectors, providing connectivity to many existing applications, frameworks, and platforms.&lt;/p&gt; &lt;h2&gt;Prerequisites&lt;/h2&gt; &lt;p&gt;For this demonstration, you will need the following technologies set up in your development environment:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;An OpenShift 4.3+ environment with Cluster Admin access&lt;/li&gt; &lt;li&gt;JDK 11 installed with &lt;code&gt;JAVA_HOME&lt;/code&gt; appropriately configured&lt;/li&gt; &lt;li&gt;Openshift CLI (&lt;code&gt;oc&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;Apache Maven 3.6.2+&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;We will build two separate Quarkus applications and deploy them to our OpenShift environment. The first application retrieves all of the data from an online repository (the &lt;a target="_blank" rel="nofollow" href="https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_daily_reports"&gt;Johns Hopkins University GitHub repository&lt;/a&gt;) and uses that data to populate a MongoDB collection called &lt;code&gt;covid19report&lt;/code&gt;. The second application hosts the Quarkusian COVID-19 Tracker website, which dynamically generates charts based on the country that was selected. This application uses REST calls to query the MongoDB collection and returns the relevant data.&lt;/p&gt; &lt;h2&gt;Adding resources to the OpenShift environment&lt;/h2&gt; &lt;p&gt;Before we can get started with the two applications, we need to add the required resources to an OpenShift cluster. We&amp;#8217;ll add a MongoDB database first; then, we will add the Kafka cluster and create the Kafka topic to publish to.&lt;/p&gt; &lt;p&gt;Using &lt;code&gt;oc&lt;/code&gt;, log into your OpenShift environment, and create a new project called &lt;code&gt;covid-19-tracker&lt;/code&gt;. Then, add the MongoDB database to that namespace:&lt;/p&gt; &lt;pre&gt;$ oc new project covid-19-tracker $ oc new-app -n covid-19-tracker --docker-image mongo:4.0 --name=covid19report &lt;/pre&gt; &lt;p&gt;Next, log into the OpenShift console, go to the OperatorHub, and search for the AMQ Streams Operator. Figure 1 shows all of the AMQ installations available from the OperatorHub.&lt;/p&gt; &lt;div id="attachment_730147" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/OperatorHub-AMQ.png"&gt;&lt;img aria-describedby="caption-attachment-730147" class="wp-image-730147 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/OperatorHub-AMQ-1024x518.png" alt="A screenshot of the AMQ Streams page in the OperatorHub." width="640" height="324" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/OperatorHub-AMQ-1024x518.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/OperatorHub-AMQ-300x152.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/OperatorHub-AMQ-768x389.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/OperatorHub-AMQ.png 1579w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-730147" class="wp-caption-text"&gt;Figure 1. Search for the AMQ Streams Operator in the OpenShift OperatorHub.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Install the &lt;b&gt;Red Hat Integration &amp;#8211; AMQ Streams&lt;/b&gt; Operator. After the Operator is successfully installed, go to &lt;b&gt;Installed Operators&lt;/b&gt;, and click on it. You should see a screen similar to Figure 2.&lt;/p&gt; &lt;div id="attachment_730167" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/RedHatIntegration-AMQStreams.png"&gt;&lt;img aria-describedby="caption-attachment-730167" class="wp-image-730167 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/RedHatIntegration-AMQStreams-1024x512.png" alt="A screenshot of all of the available APIs for the Red Hat Integration - AMQ Streams Operator." width="640" height="320" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/RedHatIntegration-AMQStreams-1024x512.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/RedHatIntegration-AMQStreams-300x150.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/RedHatIntegration-AMQStreams-768x384.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-730167" class="wp-caption-text"&gt;Figure 2. A listing of available APIs for the Red Hat Integration &amp;#8211; AMQ Streams Operator.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Select the Kafka tile and click &lt;b&gt;Create Instance&lt;/b&gt;. Create the Kafka instance with default settings. Creating this instance launches seven pods: One pod is for the Kafka Cluster Entity Operator, and there are three pods each for the Kafka cluster and Zookeeper cluster.&lt;/p&gt; &lt;p&gt;Once all seven pods are running, go back to the &lt;b&gt;Installed Operators &lt;/b&gt;page, and again select the &lt;strong&gt;Red Hat Integration &amp;#8211; AMQ Streams Operator&lt;/strong&gt;. This time, select the &lt;strong&gt;Kafka Topic&lt;/strong&gt; tile and click &lt;b&gt;Create Instance&lt;/b&gt;. You will see the option to create and configure the Kafka topic for our demonstration, as shown in Figure 3.&lt;/p&gt; &lt;div id="attachment_730177" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/CreateKafkaTopic.png"&gt;&lt;img aria-describedby="caption-attachment-730177" class="wp-image-730177" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/CreateKafkaTopic.png" alt="A screenshot of the YAML file to create the Kafka topic." width="640" height="441" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/CreateKafkaTopic.png 720w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/CreateKafkaTopic-300x207.png 300w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-730177" class="wp-caption-text"&gt;Figure 3. Create a Kafka topic by manually entering the required YAML or JSON definitions.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;In this case, we need to make just one change to the YAML file. Change the topic&amp;#8217;s name (&lt;code&gt;metadata: name&lt;/code&gt;) to: &lt;code&gt;jhucsse&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Leave everything else in the file as the default values, then create the topic. Now the Kafka environment is ready to accept the data from our Quarkus applications.&lt;/p&gt; &lt;p&gt;For our Quarkus apps to connect to Kafka and MongoDB, we need to make a note of the cluster IP addresses for those services. Run the following from the command line, and you will be presented with a list of services and their corresponding internal IPs:&lt;/p&gt; &lt;pre&gt;$ oc get services &lt;/pre&gt; &lt;p&gt;Figure 4 shows the list of available services and each one&amp;#8217;s internal IP address:&lt;/p&gt; &lt;div id="attachment_730267" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/oc_get_services-3.png"&gt;&lt;img aria-describedby="caption-attachment-730267" class="wp-image-730267" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/oc_get_services-3.png" alt="A screenshot of available services and their associated IP addresses in the terminal." width="640" height="61" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/oc_get_services-3.png 975w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/oc_get_services-3-300x29.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/oc_get_services-3-768x73.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-730267" class="wp-caption-text"&gt;Figure 4. Available services in the cluster.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Make a note of the IP address for &lt;code&gt;my-cluster-kafka-bootstrap&lt;/code&gt; and &lt;code&gt;covid19report&lt;/code&gt;. Later, we&amp;#8217;ll add these values to the &lt;code&gt;application.properties&lt;/code&gt; file for each of our Quarkus applications.&lt;/p&gt; &lt;h2&gt;Preparing the Quarkus applications&lt;/h2&gt; &lt;p&gt;Before going any further, you should either download and unzip or clone the two demo applications to your local machine. The source code is available at the following URLs:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Application 1 (&lt;code&gt;covid-data-fetching)&lt;/code&gt;&lt;/strong&gt;: &lt;a target="_blank" rel="nofollow" href="https://github.com/gmccarth/covid-data-fetching"&gt;https://github.com/gmccarth/covid-data-fetching&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Application 2 (&lt;code&gt;covid-19-tracker)&lt;/code&gt;&lt;/strong&gt;: &lt;a target="_blank" rel="nofollow" href="https://github.com/gmccarth/covid-19-tracker"&gt;https://github.com/gmccarth/covid-19-tracker&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;After you extract the code, you will need to modify the &lt;code&gt;application.properties&lt;/code&gt; file for each application to ensure that the Quarkus apps can connect to the MongoDB database and Kafka cluster we set up earlier.&lt;/p&gt; &lt;h3&gt;Modify the application.properties for Application 1&lt;/h3&gt; &lt;p&gt;In the &lt;code&gt;application.properties&lt;/code&gt; for Application 1 (&lt;code&gt;covid-data-fetching&lt;/code&gt;), find the two lines that start with &lt;code&gt;quarkus.mongodb&lt;/code&gt;. Replace the IP addresses after &lt;code&gt;mongodb://&lt;/code&gt; with the IP address for our MongoDB pod (&lt;code&gt;covid19report&lt;/code&gt;), which you noted earlier. Be sure to include the correct port, which is 27017:&lt;/p&gt; &lt;pre&gt;quarkus.mongodb.connection-string=mongodb://&lt;em&gt;&amp;#60;the IP for covid19report&amp;#62;&lt;/em&gt;:27017 quarkus.mongodb.hosts=mongodb://&lt;em&gt;&amp;#60;the IP for covid19report&amp;#62;&lt;/em&gt;:27017 &lt;em&gt;For example:&lt;/em&gt; quarkus.mongodb.connection-string=mongodb://172.30.195.119:27017 quarkus.mongodb.hosts=mongodb://172.30.195.119:27017&lt;/pre&gt; &lt;p&gt;Similarly, find the &lt;code&gt;camel.component.kafka.brokers&lt;/code&gt; line and replace the IP address with the &lt;code&gt;my-cluster-kafka-bootstrap&lt;/code&gt; IP address. Use port 9092 for this service:&lt;/p&gt; &lt;pre&gt;camel.component.kafka.brokers=&lt;em&gt;&amp;#60;the IP for my-cluster-kafka-bootstrap&amp;#62;&lt;/em&gt;:9092 &lt;/pre&gt; &lt;h3&gt;Modify the application.properties for Application 2&lt;/h3&gt; &lt;p&gt;Now open Application 2 (&lt;code&gt;covid-19-tracker&lt;/code&gt;) and find the &lt;code&gt;quarkus.mongodb.connection-string&lt;/code&gt;. Replace the IP address with the IP address for our MongoDB pod:&lt;/p&gt; &lt;pre&gt;quarkus.mongodb.connection-string=mongodb://&lt;em&gt;&amp;#60;the IP for covid19report&amp;#62;&lt;/em&gt;:27017 &lt;/pre&gt; &lt;p&gt;Similarly, find the &lt;code&gt;camel.component.kafka.brokers&lt;/code&gt; line and replace the IP address with the &lt;code&gt;my-cluster-kafka-bootstrap&lt;/code&gt;IP address. Use port 9092 for this service.&lt;/p&gt; &lt;h2&gt;Set up and run the first application&lt;/h2&gt; &lt;p&gt;For our first application, we use Apache Camel to retrieve files directly from the Johns Hopkins University GitHub repository URL. Camel transforms the CSV files into individual records, which we place into a Kafka topic. A second Camel route then consumes the messages from the Kafka topic. It transforms each record into a database object and inserts that data into a MongoDB collection. We&amp;#8217;ll go through each of these phases in detail.&lt;/p&gt; &lt;h3&gt;Phase 1: Retrieve the data from the repository, transform it, and publish it to a Kafka topic&lt;/h3&gt; &lt;p&gt;Figure 5 shows a flow diagram of the CSV files being retrieved from the GitHub repository and placed in a Kafka topic.&lt;/p&gt; &lt;div id="attachment_730317" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Phase1.png"&gt;&lt;img aria-describedby="caption-attachment-730317" class="wp-image-730317 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Phase1-1024x981.png" alt="A flow diagram of the CSV files being retrieved from the shared repository and placed in the Kafka topic." width="640" height="613" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Phase1-1024x981.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Phase1-300x287.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Phase1-768x735.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Phase1.png 1130w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-730317" class="wp-caption-text"&gt;Figure 5. Retrieve the data from the repository, transform it, and publish it to a Kafka topic.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;You can find the code for this phase in the &lt;code&gt;JhuCsseExtractor.java&lt;/code&gt; file:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;First, we use a Camel route to get the CSV files from the Johns Hopkins University source: &lt;pre&gt;from("timer:jhucsse?repeatCount=1") .setHeader("nextFile", simple("02-01-2020")) .setHeader("version", simple("v1")) .loopDoWhile(method(this, "dateInValidRange(${header.nextFile})")) .setHeader("nextFile", method(this,      "computeNextFile(${header.nextFile})")) .setHeader("version", method(this, "getVersion(${header.nextFile})")) .toD("https:{{jhu.csse.baseUrl}}/${header.nextFile}.csv?httpMethod=GET") .log(LoggingLevel.DEBUG,"after setHeader:nextFile=${header.nextFile}") .split().tokenize("\n", 1, true) .log(LoggingLevel.DEBUG,"version=${header.version}") .choice() .when(header("version").isEqualTo("v1")) .unmarshal().bindy(BindyType.Csv, JhuCsseDailyReportCsvRecordv1.class) .marshal().json(JsonLibrary.Jackson) .to("kafka:jhucsse") .otherwise() .unmarshal().bindy(BindyType.Csv, JhuCsseDailyReportCsvRecordv2.class) .marshal().json(JsonLibrary.Jackson) .to("kafka:jhucsse") .end(); &lt;/pre&gt; &lt;/li&gt; &lt;li&gt;Next, we use a &lt;code&gt;loopDoWhile&lt;/code&gt; to fetch all of the CSV files for the specified date range.&lt;/li&gt; &lt;li&gt;At this point, the CSV format changes to include additional data from &lt;code&gt;03-22-2020.csv&lt;/code&gt; onward. We use a &lt;code&gt;choice&lt;/code&gt; method to handle the change in data format. The &lt;code&gt;choice&lt;/code&gt; method ensures that all of the data is correctly inserted into the Kafka topic.&lt;/li&gt; &lt;/ol&gt; &lt;h3&gt;Phase 2: Consume the messages in the Kafka topic and write them to the MongoDB collection&lt;/h3&gt; &lt;p&gt;Figure 6 shows a flow diagram of the transformed records being placed in the MongoDB collection.&lt;/p&gt; &lt;div id="attachment_730337" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Phase2.png"&gt;&lt;img aria-describedby="caption-attachment-730337" class="wp-image-730337 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Phase2-1024x915.png" alt="A flow diagram of the database objects being sent to the MongoDB database." width="640" height="572" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Phase2-1024x915.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Phase2-300x268.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Phase2-768x686.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Phase2.png 1110w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-730337" class="wp-caption-text"&gt;Figure 6. Consume the messages in the Kafka topic and write them to the MongoDB collection.&lt;/p&gt;&lt;/div&gt; &lt;ol&gt; &lt;li&gt;In a different bean (&lt;code&gt;MongoDbPopulator.java&lt;/code&gt;), we configure another Camel route to consume the messages from the Kafka topic we developed in Phase 1. The Camel route will write those messages to our MongoDB database: &lt;pre&gt;fromF("kafka:jhucsse?brokers=%s",brokers)         .log("message: ${body}")         .toF("mongodb:mongoClient?database=%s&amp;#38;collection=%s&amp;#38;operation=insert", database, collection); &lt;/pre&gt; &lt;/li&gt; &lt;li&gt;To run the Quarkus app, in our terminal, we need to be in the &lt;code&gt;../covid-data-fetching/&lt;/code&gt; directory. Type the following into the terminal to kick-off building and deploying the Quarkus application: &lt;pre&gt;./mvnw clean package -Dquarkus.kubernetes.deploy=true -DskipTests=true -Dquarkus.kubernetes-client.trust-certs=true -Dquarkus.s2i.base-jvm-image=fabric8/s2i-java:latest-java11 &lt;/pre&gt; &lt;/li&gt; &lt;li&gt;When you see the &lt;code&gt;BUILD SUCCESS&lt;/code&gt; message, go to your OpenShift console, where the &lt;code&gt;covid-data-fetching&lt;/code&gt; application should be starting to run. To view the Camel route in action, go to the &lt;code&gt;covid19report&lt;/code&gt; pod&amp;#8217;s &lt;strong&gt;Logs&lt;/strong&gt; tab, where you should see something similar to Figure 7, a screenshot of messages flowing into Kafka. &lt;p&gt;&lt;div id="attachment_730187" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/KafkaStreamingLogs.png"&gt;&lt;img aria-describedby="caption-attachment-730187" class="wp-image-730187 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/KafkaStreamingLogs-1024x486.png" alt="A screenshot of messages streaming into Kafka." width="640" height="304" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/KafkaStreamingLogs-1024x486.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/KafkaStreamingLogs-300x142.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/KafkaStreamingLogs-768x364.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/KafkaStreamingLogs.png 1586w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-730187" class="wp-caption-text"&gt;Figure 7. The application logs show a message stream flowing into Kafka.&lt;/p&gt;&lt;/div&gt;&lt;/li&gt; &lt;li&gt;To confirm that the records are being written to MongoDB, go to the &lt;b&gt;Terminal&lt;/b&gt; tab of the &lt;code&gt;covid19report&lt;/code&gt; pod and type &lt;code&gt;Mongo&lt;/code&gt; in the terminal window. This command launches the MongoDB shell. In the shell type &lt;code&gt;show dbs&lt;/code&gt; to see a list of databases, which should include &lt;code&gt;covid19report&lt;/code&gt;. Figure 8 shows the list of databases. &lt;p&gt;&lt;div id="attachment_730367" style="width: 248px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/MongoShowDbs.png"&gt;&lt;img aria-describedby="caption-attachment-730367" class="wp-image-730367 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/MongoShowDbs.png" alt="A screenshot showing a list of databases, including covid19report." width="238" height="126" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-730367" class="wp-caption-text"&gt;Figure 8. The list of databases should include covid19report.&lt;/p&gt;&lt;/div&gt;&lt;/li&gt; &lt;/ol&gt; &lt;h2&gt;Set up and run the second application&lt;/h2&gt; &lt;p&gt;Application 2 is the Quarkusian COVID-19 Tracker web application. It uses REST calls to the MongoDB database to dynamically retrieve a requested data set, then launches the website. Figure 9 shows a flow diagram for the COVID-19 Tracker.&lt;/p&gt; &lt;div id="attachment_730377" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Application2Architecture.png"&gt;&lt;img aria-describedby="caption-attachment-730377" class="wp-image-730377 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Application2Architecture-1024x1015.png" alt="A flow diagram of a COVID-19 data set being retrieved from MongoDB." width="640" height="634" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Application2Architecture-1024x1015.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Application2Architecture-150x150.png 150w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Application2Architecture-300x297.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Application2Architecture-768x761.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Application2Architecture.png 1378w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-730377" class="wp-caption-text"&gt;Figure 9. A COVID-19 data set is dynamically retrieved from the MongoDB database.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Notes about this application:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;When we run Quarkus, a web server is started and is accessible on port 8080.&lt;/li&gt; &lt;li&gt;Our Quarkus project included RESTEasy JAX-RS. This allows us to create multiple REST endpoints for the MongoDB queries.&lt;/li&gt; &lt;li&gt;Quarkus also supports dependency injection, so we can easily inject a companion bean into our main class.&lt;/li&gt; &lt;li&gt;Our &lt;code&gt;index.html&lt;/code&gt; page (in the &lt;code&gt;resources/META-INF&lt;/code&gt; folder) has a dropdown list to select the specific, country-based data set that we want to use. The dropdown list is populated from a query to the MongoDB database. On submit, the page sends the country code in a &lt;code&gt;GET&lt;/code&gt; request to the &lt;code&gt;TrackerResource&lt;/code&gt; bean. The bean uses &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/mongodb-panache"&gt;Panache&lt;/a&gt; to query the MongoDB database. It then returns the response to the web page, which generates a graph from the received JSON response.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To run the Quarkus app, we need to be in the &lt;code&gt;../covid-19-tracker/&lt;/code&gt; directory. Type the following into the terminal to kick-off building and deploying this Quarkus application:&lt;/p&gt; &lt;pre&gt;$ ./mvnw clean package -Dquarkus.kubernetes.deploy=true -DskipTests=true -Dquarkus.kubernetes-client.trust-certs=true -Dquarkus.s2i.base-jvm-image=fabric8/s2i-java:latest-java11 &lt;/pre&gt; &lt;p&gt;After you see the &lt;code&gt;BUILD SUCCESS&lt;/code&gt; message, go to your OpenShift console and confirm that the &lt;code&gt;covid-19-tracker&lt;/code&gt; application is starting to run. Once the pod is running, you need to expose the service, so that you can get a route to it from the internet. In the terminal, type:&lt;/p&gt; &lt;pre&gt;$ oc expose svc/covid-19-tracker&lt;/pre&gt; &lt;p&gt;In your OpenShift console, in the administrator&amp;#8217;s perspective, go to &lt;b&gt;Networking&lt;/b&gt; -&amp;#62; &lt;b&gt;Routes&lt;/b&gt; to get the application URL. Click on the URL, which takes you to the application. Try selecting data sets from different countries. You should see something like the screenshot in Figure 10, with the charts changing to show the COVID-19 data for the country that you have selected.&lt;/p&gt; &lt;div id="attachment_730387" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Website.png"&gt;&lt;img aria-describedby="caption-attachment-730387" class="wp-image-730387 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Website-1024x555.png" alt="A screenshot of the web page showing confirmed cases for the United Kingdom." width="640" height="347" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Website-1024x555.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Website-300x163.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Website-768x417.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Website.png 1366w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-730387" class="wp-caption-text"&gt;Figure 10. The COVID-19 Tracker shows data results from whatever country is selected.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;In this article, we demonstrated how to extract meaningful visualizations from an external repository with relative ease, and with very few lines of code. We used existing, solid frameworks to reduce complexity and the time required to build a reusable application. Deploying the application to OpenShift reduced the time necessary to develop, build, and deploy the demo applications. Additionally, Quarkus requires substantially less memory than a standard Java application. As a result, we built applications with faster launch times and quicker responses, resulting in an improved experience for developers, end-users, and ultimately, the business.&lt;/p&gt; &lt;p&gt;Are you interested in trying out Quarkus? Check out our self-paced &lt;a href="https://developers.redhat.com/courses/quarkus/getting-started/"&gt;Getting Started with Quarkus&lt;/a&gt; lab!  See the &lt;a href="https://developers.redhat.com/summit/2020/self-paced/"&gt;entire catalog&lt;/a&gt; for more developer labs.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: I would like to thank Mary Cochran, Claus Ibsen, and Josh Reagan, who assisted with troubleshooting and pointed me in the right direction for this article. Special thanks, also, to my fellow Hackfest team members: Jochen Cordes and Bruno Machado, who helped with building the Camel routes and configuring the MongoDB database.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F15%2Ftracking-covid-19-using-quarkus-amq-streams-and-camel-k-on-openshift%2F&amp;#38;linkname=Tracking%20COVID-19%20using%20Quarkus%2C%20AMQ%20Streams%2C%20and%20Camel%20K%20on%20OpenShift" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F15%2Ftracking-covid-19-using-quarkus-amq-streams-and-camel-k-on-openshift%2F&amp;#38;linkname=Tracking%20COVID-19%20using%20Quarkus%2C%20AMQ%20Streams%2C%20and%20Camel%20K%20on%20OpenShift" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F15%2Ftracking-covid-19-using-quarkus-amq-streams-and-camel-k-on-openshift%2F&amp;#38;linkname=Tracking%20COVID-19%20using%20Quarkus%2C%20AMQ%20Streams%2C%20and%20Camel%20K%20on%20OpenShift" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F15%2Ftracking-covid-19-using-quarkus-amq-streams-and-camel-k-on-openshift%2F&amp;#38;linkname=Tracking%20COVID-19%20using%20Quarkus%2C%20AMQ%20Streams%2C%20and%20Camel%20K%20on%20OpenShift" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F15%2Ftracking-covid-19-using-quarkus-amq-streams-and-camel-k-on-openshift%2F&amp;#38;linkname=Tracking%20COVID-19%20using%20Quarkus%2C%20AMQ%20Streams%2C%20and%20Camel%20K%20on%20OpenShift" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F15%2Ftracking-covid-19-using-quarkus-amq-streams-and-camel-k-on-openshift%2F&amp;#38;linkname=Tracking%20COVID-19%20using%20Quarkus%2C%20AMQ%20Streams%2C%20and%20Camel%20K%20on%20OpenShift" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F15%2Ftracking-covid-19-using-quarkus-amq-streams-and-camel-k-on-openshift%2F&amp;#38;linkname=Tracking%20COVID-19%20using%20Quarkus%2C%20AMQ%20Streams%2C%20and%20Camel%20K%20on%20OpenShift" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F15%2Ftracking-covid-19-using-quarkus-amq-streams-and-camel-k-on-openshift%2F&amp;#038;title=Tracking%20COVID-19%20using%20Quarkus%2C%20AMQ%20Streams%2C%20and%20Camel%20K%20on%20OpenShift" data-a2a-url="https://developers.redhat.com/blog/2020/06/15/tracking-covid-19-using-quarkus-amq-streams-and-camel-k-on-openshift/" data-a2a-title="Tracking COVID-19 using Quarkus, AMQ Streams, and Camel K on OpenShift"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/06/15/tracking-covid-19-using-quarkus-amq-streams-and-camel-k-on-openshift/"&gt;Tracking COVID-19 using Quarkus, AMQ Streams, and Camel K on OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/QkUhNGsv0ds" height="1" width="1" alt=""/&gt;</content><summary>In just a matter of weeks, the world that we knew changed forever. The COVID-19 pandemic came swiftly and caused massive disruption to our healthcare systems and local businesses, throwing the world’s economies into chaos. The coronavirus quickly became a crisis that affected everyone. As researchers and scientists rushed to make sense of it, and find ways to eliminate or slow the rate of infectio...</summary><dc:creator>gmccarth</dc:creator><dc:date>2020-06-15T07:00:04Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/06/15/tracking-covid-19-using-quarkus-amq-streams-and-camel-k-on-openshift/</feedburner:origLink></entry></feed>
